name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

jobs:
  # Main goreleaser job
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      digest-controller-manager: ${{ steps.ko.outputs.digest-controller-manager }}
      digest-ocm-transport-controller: ${{ steps.ko.outputs.digest-ocm-transport-controller }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LDFLAGS: "-X main.version=${{ github.ref_name }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-dist
          path: dist/
          retention-days: 7

  # Generate hashes for binary artifacts for SLSA provenance
  combine_hashes:
    needs: [goreleaser]
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hashes.outputs.hashes }}
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-dist
          path: dist

      - id: hashes
        run: |
          # Find all binary artifacts and generate base64-encoded hashes
          cd dist
          find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
            echo "$(basename "$file")=$(sha256sum "$file" | cut -d' ' -f1 | base64 -w0)"
          done > hashes.txt
          echo "hashes=$(cat hashes.txt | base64 -w0)" >> "$GITHUB_OUTPUT"

  # Generate SLSA provenance for binary artifacts
  provenance:
    needs: [combine_hashes]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.combine_hashes.outputs.hashes }}"
      upload-assets: true

  # Generate SLSA provenance for container images
  image-provenance:
    needs: [goreleaser]
    strategy:
      matrix:
        target: [controller-manager, ocm-transport-controller]
    permissions:
      actions: read
      id-token: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ghcr.io/antedotee/kubestellar/${{ matrix.target }}
      registry-username: ${{ github.actor }}
      digest: ${{ needs.goreleaser.outputs[format('digest-{0}', matrix.target)] }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}