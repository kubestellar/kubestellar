name: Documentation Preview Automation

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'docs/**'
      - 'website/**'
      - '*.md'
      - '.github/workflows/docs-preview.yml'

jobs:
  build-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r docs/requirements.txt
          cd website && npm install

      - name: Build documentation
        run: |
          cd website
          npm run build

      - name: Deploy to Preview Environment
        id: deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: website/build
          target-folder: preview/pr-${{ github.event.pull_request.number }}
          clean: false
          single-commit: true

      - name: Update PR with Preview Link
        uses: actions/github-script@v6
        if: success()
        with:
          script: |
            const previewUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/preview/pr-${context.payload.pull_request.number}/`;
            const commentBody = `🌐 Documentation preview automatically generated:\n${previewUrl}`;
            
            // Check if bot has already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Documentation preview')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody
              });
            }

            // Update PR description if needed
            const prBody = context.payload.pull_request.body || '';
            if (!prBody.includes(previewUrl)) {
              const newBody = prBody + `\n\nPreview: ${previewUrl}`;
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: newBody
              });
            }