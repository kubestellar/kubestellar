name: Trivy Vulnerability Scanner
permissions:
  issues: write
  contents: read
  security-events: write
on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
jobs:
  scan:
    name: Scan for Vulnerabilities
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities_found: ${{ steps.parse-results.outputs.vulnerabilities_found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - name: Run Trivy scan and generate reports (SARIF + JSON)
        run: |
          trivy fs \
            --format template \
            --template '@/contrib/sarif.tpl' \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH \
            --vuln-type os,library \
            --no-progress .
          trivy fs \
            --format json \
            --output trivy-results.json \
            --severity CRITICAL,HIGH \
            --vuln-type os,library \
            --no-progress .
      - name: Check for HIGH or CRITICAL vulnerabilities
        id: parse-results
        run: |
          if jq -e '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length > 0' trivy-results.json; then
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload Trivy JSON report as artifact
        if: steps.parse-results.outputs.vulnerabilities_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json-report
          path: trivy-results.json
          retention-days: 1
      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-fs
  create-issue:
    name: Create Vulnerability Issue
    needs: [scan]
    if: needs.scan.outputs.vulnerabilities_found == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download Trivy JSON report
        uses: actions/download-artifact@v4
        with:
          name: trivy-json-report

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Check for duplicate CVEs and create issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get unique vulnerability IDs from scan results
          VULN_IDS=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL") | .VulnerabilityID' trivy-results.json | sort -u)
          
          echo "Found vulnerabilities: $VULN_IDS"
          
          # Check each vulnerability ID for existing issues
          for vuln_id in $VULN_IDS; do
            echo "Checking for existing issue with vulnerability: $vuln_id"
          
            # Search for existing issues with this CVE ID in TITLE ONLY
            existing_issue=$(gh issue list --state=open --search="$vuln_id" --json number,title --limit 100 | \
              jq -r --arg vuln "$vuln_id" '.[] | select(.title | contains($vuln)) | .number' | head -1)
          
            if [[ -z "$existing_issue" ]]; then
              echo "No existing issue found for $vuln_id - creating new issue"
          
              # Extract vulnerability details for this specific CVE
              jq -r --arg vuln "$vuln_id" '
                .Results[]? | .Vulnerabilities[]? | 
                select(.VulnerabilityID == $vuln) | 
                select(.Severity == "HIGH" or .Severity == "CRITICAL") |
                "## ğŸš¨ Security Vulnerability: " + .VulnerabilityID + "\n\n" +
                "**Severity:** " + .Severity + "\n" +
                "**CVSS Score:** " + ((.CVSS // {} | .nvd // {} | .V3Score // "N/A") | tostring) + "\n\n" +
                "### Description\n" +
                (.Title // "No title available") + "\n\n" +
                (.Description // "No description available") + "\n\n" +
                "### Affected Package(s)\n" +
                "| Package | Installed Version | Fixed Version |\n" +
                "|---------|------------------|---------------|\n" +
                "| " + .PkgName + " | " + .InstalledVersion + " | " + (.FixedVersion // "N/A") + " |\n\n" +
                "### References\n" +
                "- [NVD Database](https://nvd.nist.gov/vuln/detail/" + .VulnerabilityID + ")\n" +
                "- [Aqua Security](https://avd.aquasec.com/nvd/" + (.VulnerabilityID | ascii_downcase) + ")\n\n" +
                "### Remediation\n" +
                (if .FixedVersion then 
                  "Update **" + .PkgName + "** from version `" + .InstalledVersion + "` to `" + .FixedVersion + "`" 
                else 
                  "No fix available yet. Monitor for updates or consider alternative packages." 
                end) + "\n\n" +
                "---\n" +
                "*Auto-generated by Trivy vulnerability scanner*"
              ' trivy-results.json > issue-content-$vuln_id.md
          
              # Create the issue
              gh issue create \
                --title "ğŸ”’ $vuln_id - Security Vulnerability" \
                --body-file issue-content-$vuln_id.md \
                --label "security,vulnerability"
          
              echo "Created issue for $vuln_id"
            fi
          done
