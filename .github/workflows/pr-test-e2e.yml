name: Test end to end

on:
  workflow_call:
  # So we can trigger manually if needed
  workflow_dispatch:
    inputs:
      testFlags:
        description: 'Command line flags for run-test.sh'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - '--released'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

jobs:
  ginkgo-test:
    name: Tests in ginkgo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-go@v5
        with:
          go-version: v1.21
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        id: install

      - uses: ko-build/setup-ko@v0.7

      - name: Install dependencies
        run: |
          curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/main/install.sh | bash
          wget https://github.com/kubestellar/kubeflex/releases/download/v0.6.3/kubeflex_0.6.3_linux_amd64.tar.gz
          tar -xvf kubeflex_0.6.3_linux_amd64.tar.gz bin/kflex
          mv bin/kflex /usr/local/bin
          rm -fr bin kubeflex_0.6.3_linux_amd64.tar.gz
          go install github.com/onsi/ginkgo/v2/ginkgo

      - name: Run test
        env:
          TEST_FLAGS: ${{ github.event.inputs.testFlags }}
        run: |
          cd test/e2e/ginkgo
          KFLEX_DISABLE_CHATTY=true ginkgo -vv --trace --no-color $TEST_FLAGS -- -kubestellar-setup-flags="--kubestellar-controller-manager-verbosity 5 --transport-controller-verbosity 5"

      - name: show kubeconfig contexts
        if: always()
        run: kubectl config get-contexts

      - name: show pods in hosting cluster
        if: always()
        run: |
          date
          kubectl --context kind-kubeflex get pods -A
          kubectl --context kind-kubeflex get pods -A | grep -vw Running | grep -vw Completed | grep -v NAME | while read ns name rest; do echo; kubectl --context kind-kubeflex describe pod -n $ns $name; echo; kubectl --context kind-kubeflex logs -n $ns $name || true; done

      - name: show previous logs in hosting cluster
        if: always()
        run: |
          date
          kubectl --context kind-kubeflex get pods -A | grep -v NAME | while read ns name ready status restarts rest; do if [ $restarts != 0 ]; then echo; echo For $ns/$name; kubectl --context kind-kubeflex logs -p -n $ns $name || true; fi; done;

      - name: show Deployment objects in hosting cluster
        if: always()
        run: kubectl --context kind-kubeflex get deployments -A

      - name: show Deployment objects in its1
        if: always()
        run: kubectl --context its1 get deployments -A

      - name: show kubestellar controller manager log
        if: always()
        run: kubectl --context kind-kubeflex logs -n wds1-system $(kubectl --context kind-kubeflex get pod -n wds1-system --selector=control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')

      - name: show transport controller log
        if: always()
        run: kubectl --context kind-kubeflex -n wds1-system logs $(kubectl --context kind-kubeflex -n wds1-system get pods -l name=transport-controller -o jsonpath='{.items[0].metadata.name}')

      - name: show bindingpolicies
        if: always()
        run: kubectl --context wds1 get bindingpolicies.control.kubestellar.io -o yaml

      - name: show deployments in wds1
        if: always()
        run: kubectl --context wds1 get deployments -A -o yaml

      - name: show bindings
        if: always()
        run: kubectl --context wds1 get bindings.control.kubestellar.io -o yaml

      - name: show deployments in cluster1
        if: always()
        run: kubectl --context cluster1 get deployments -A -o yaml

      - name: show deployments in cluster2
        if: always()
        run: kubectl --context cluster2 get deployments -A -o yaml

      - name: show manifestworks
        if: always()
        run: kubectl --context its1 get manifestworks -A -o yaml

      - name: show workstatuses
        if: always()
        run: kubectl --context its1 get workstatuses -A -o yaml

      - name: show combinedstatuses
        if: always()
        run: kubectl --context wds1 get combinedstatuses -A -o yaml

      - name: scrape kubestellar controller-manager
        if: always()
        run: |
          kubectl --context kind-kubeflex port-forward -n wds1-system deploy/kubestellar-controller-manager 8080 &
          sleep 10
          curl http://localhost:8080/metrics
          kill %

      - name: scrape transport controller
        if: always()
        run: |
          kubectl --context kind-kubeflex port-forward -n wds1-system deploy/transport-controller 8090 &
          sleep 10
          curl http://localhost:8090/metrics
          kill %

      - name: scrape OCM Status Add-On Controller
        if: always()
        run: |
          kubectl --context its1 port-forward -n open-cluster-management deploy/addon-status-controller 9280 &
          sleep 10
          curl http://localhost:9280/metrics
          kill %
          sleep 1

      - name: scrape OCM Status Add-On Agent
        if: always()
        run: |
          kubectl --context cluster1 port-forward -n open-cluster-management-agent-addon deploy/status-agent 8080 &
          sleep 10
          curl http://localhost:8080/metrics
          kill %

  test-bash:
    name: Test in bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-go@v5
        with:
          go-version: v1.21
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        id: install

      - uses: ko-build/setup-ko@v0.7

      - name: Install dependencies
        run: |
          curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/main/install.sh | bash
          wget https://github.com/kubestellar/kubeflex/releases/download/v0.6.3/kubeflex_0.6.3_linux_amd64.tar.gz
          tar -xvf kubeflex_0.6.3_linux_amd64.tar.gz bin/kflex
          mv bin/kflex /usr/local/bin
          rm -fr bin kubeflex_0.6.3_linux_amd64.tar.gz

      - name: Run test
        env:
          TEST_FLAGS: ${{ github.event.inputs.testFlags }}
        run: |
          cd test/e2e/
          KFLEX_DISABLE_CHATTY=true ./run-test.sh $TEST_FLAGS

      - name: show kubeconfig contexts
        if: always()
        run: kubectl config get-contexts

      - name: show pods in hosting cluster
        if: always()
        run: |
          date
          kubectl --context kind-kubeflex get pods -A
          kubectl --context kind-kubeflex get pods -A | grep -vw Running | grep -vw Completed | grep -v NAME | while read ns name rest; do echo; kubectl --context kind-kubeflex describe pod -n $ns $name; echo; kubectl --context kind-kubeflex logs -p -n $ns $name || true; echo; kubectl --context kind-kubeflex logs -n $ns $name || true; done

      - name: show Deployment objects in hosting cluster
        if: always()
        run: kubectl --context kind-kubeflex get deployments -A

      - name: show Deployment objects in its1
        if: always()
        run: kubectl --context its1 get deployments -A

      - name: show kubestellar controller manager log
        if: always()
        run: kubectl --context kind-kubeflex logs -n wds1-system $(kubectl --context kind-kubeflex get pod -n wds1-system --selector=control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')

      - name: show transport controller log
        if: always()
        run: kubectl --context kind-kubeflex -n wds1-system logs $(kubectl --context kind-kubeflex -n wds1-system get pods -l name=transport-controller -o jsonpath='{.items[0].metadata.name}')

      - name: show bindingpolicies
        if: always()
        run: kubectl --context wds1 get bindingpolicies.control.kubestellar.io -o yaml

      - name: show deployments in wds1
        if: always()
        run: kubectl --context wds1 get deployments -A -o yaml

      - name: show bindings
        if: always()
        run: kubectl --context wds1 get bindings.control.kubestellar.io -o yaml

      - name: show deployments in cluster1
        if: always()
        run: kubectl --context cluster1 get deployments -A -o yaml

      - name: show deployments in cluster2
        if: always()
        run: kubectl --context cluster2 get deployments -A -o yaml

      - name: show manifestworks
        if: always()
        run: kubectl --context its1 get manifestworks -A -o yaml

      - name: show workstatuses
        if: always()
        run: kubectl --context its1 get workstatuses -A -o yaml

      - name: show combinedstatuses
        if: always()
        run: kubectl --context wds1 get combinedstatuses -A -o yaml

      - name: scrape kubestellar controller-manager
        if: always()
        run: |
          kubectl --context kind-kubeflex port-forward -n wds1-system deploy/kubestellar-controller-manager 8080 &
          sleep 10
          curl http://localhost:8080/metrics
          kill %

      - name: scrape transport controller
        if: always()
        run: |
          kubectl --context kind-kubeflex port-forward -n wds1-system deploy/transport-controller 8090 &
          sleep 10
          curl http://localhost:8090/metrics
          kill %

      - name: scrape OCM Status Add-On Controller
        if: always()
        run: |
          kubectl --context its1 port-forward -n open-cluster-management deploy/addon-status-controller 9280 &
          sleep 10
          curl http://localhost:9280/metrics
          kill %
          sleep 1

      - name: scrape OCM Status Add-On Agent
        if: always()
        run: |
          kubectl --context cluster1 port-forward -n open-cluster-management-agent-addon deploy/status-agent 8080 &
          sleep 10
          curl http://localhost:8080/metrics
          kill %
