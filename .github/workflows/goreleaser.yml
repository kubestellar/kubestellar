name: goreleaser

on:
  push:
    tags:
      - "v*"
  # Allow manual or branch-triggered runs without tags
  workflow_dispatch:

permissions:
  contents: read
  packages: read

# Global environment variables
env:
  REGISTRY: ghcr.io
  CORE_CHART_PATH: ./core-chart
  # Use tag when present, else fall back to commit SHA for prerelease versioning
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || format('0.0.0-{0}', github.sha) }}

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      digest-controller-manager: ${{ steps.build-images.outputs.digest-controller-manager }}
      digest-ocm-transport-controller: ${{ steps.build-images.outputs.digest-ocm-transport-controller }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version: 1.24

      - name: Delete non-semver tags
        run: 'git tag -d $(git tag -l | grep -v "^v")'

      - name: Set LDFLAGS
        run: echo LDFLAGS="$(make ldflags)" >> $GITHUB_ENV

      - name: Install syft binary executable
        uses: anchore/sbom-action/download-syft@9246b90769f852b3a8921f330c59e0b3f439d6e9

      - name: Run GoReleaser on tag
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552
        with:
          distribution: goreleaser
          version: latest
          args: release --timeout 60m --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.actor }}
          EMAIL: ${{ github.actor}}@users.noreply.github.com

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push container images via ko; capture digests for SLSA provenance
      - name: Set up ko
        uses: ko-build/setup-ko@v0.6

      - name: Build & push controller images (ko)
        id: build-images
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository_owner }}/kubestellar
        run: |
          set -euo pipefail
          # Publish controller-manager
          CM_REF=$(ko publish ./cmd/controller-manager --tags "${{ env.VERSION }}")
          CM_DIGEST=${CM_REF##*@}

          # Publish ocm-transport-controller
          OT_REF=$(ko publish ./pkg/transport/ocm-transport-controller --tags "${{ env.VERSION }}")
          OT_DIGEST=${OT_REF##*@}

          echo "digest-controller-manager=${CM_DIGEST}" >> "$GITHUB_OUTPUT"
          echo "digest-ocm-transport-controller=${OT_DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Package and push charts
        run: |
          sed -i "s/^KUBESTELLAR_VERSION:.*$/KUBESTELLAR_VERSION: \"${VERSION}\"/g" ${{ env.CORE_CHART_PATH }}/values.yaml

          helm package ${{ env.CORE_CHART_PATH }} --destination . --version ${VERSION} --app-version ${VERSION} --dependency-update
          helm push ./core-chart*.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/kubestellar

      # Upload the GoReleaser distribution so downstream jobs (hash combiner & provenance gen)
      # can fetch it by name "goreleaser-dist". We pin to the major version for security & updates.
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-dist
          path: dist/
          retention-days: 7

  # Generate hashes for binary artifacts for SLSA provenance
  combine_hashes:
    needs: [goreleaser]
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hashes.outputs.hashes }}
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: goreleaser-dist
          path: dist

      - id: hashes
        run: |
          # Find all binary artifacts and generate base64-encoded hashes
          find dist -name "*.tar.gz" -o -name "*.zip" | while read file; do
            echo "$(basename "$file")=$(sha256sum "$file" | cut -d' ' -f1 | base64 -w0)"
          done > hashes.txt
          echo "hashes=$(cat hashes.txt | base64 -w0)" >> "$GITHUB_OUTPUT"

  # Generate SLSA provenance for binary artifacts
  provenance:
    needs: [combine_hashes]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.combine_hashes.outputs.hashes }}"
      # Upload provenance to the release
      upload-assets: true

  # Generate SLSA provenance for container images
  image-provenance:
    needs: [goreleaser]
    strategy:
      matrix:
        target: [controller-manager, ocm-transport-controller]
    permissions:
      actions: read
      id-token: write
      packages: write
    if: always()
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ghcr.io/${{ github.repository_owner }}/kubestellar/${{ matrix.target }}
      registry-username: ${{ github.actor }}
      digest: ${{ needs.goreleaser.outputs[format('digest-{0}', matrix.target)] }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
