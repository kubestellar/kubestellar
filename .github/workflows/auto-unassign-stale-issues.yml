name: Auto-unassign stale issues

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: "0 9 * * *"
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  check-stale-assignments:
    if: github.repository_owner == 'kubestellar'
    name: Check and unassign stale issue assignments
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: read
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          token: ${{ secrets.GH_ALL_PROJECT_TOKEN }}
          persist-credentials: "false"

      - name: Check stale assignments and send warnings
        env:
          GH_TOKEN: ${{ secrets.GH_ALL_PROJECT_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          
          # Get all open issues that are assigned
          gh issue list --state open --assignee "*" --json number,assignees,createdAt,updatedAt,title,url > assigned_issues.json
          
          # Current timestamp
          current_time=$(date +%s)
          
          # Process each assigned issue
          jq -r '.[] | @base64' assigned_issues.json | while read -r issue_data; do
            issue=$(echo "$issue_data" | base64 --decode)
            issue_number=$(echo "$issue" | jq -r '.number')
            assignee=$(echo "$issue" | jq -r '.assignees[0].login')
            created_at=$(echo "$issue" | jq -r '.createdAt')
            title=$(echo "$issue" | jq -r '.title')
            
            # Convert created_at to timestamp
            if [[ "$OSTYPE" == "darwin"* ]]; then
              assigned_time=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "${created_at}" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S" "${created_at%Z}" +%s)
            else
              assigned_time=$(date -d "$created_at" +%s)
            fi
            
            # Calculate days since assignment
            days_since_assignment=$(( (current_time - assigned_time) / 86400 ))
            
            echo "Processing issue #$issue_number assigned to $assignee ($days_since_assignment days ago)"
            
            # Check if there are any PRs that reference this issue
            prs_referencing_issue=$(gh pr list --state all --search "$issue_number" --json number,state,closedAt,author | jq --arg assignee "$assignee" '[.[] | select(.author.login == $assignee)]')
            
            # Check if assignee has any open PRs referencing this issue
            open_prs=$(echo "$prs_referencing_issue" | jq '[.[] | select(.state == "OPEN")]')
            open_pr_count=$(echo "$open_prs" | jq 'length')
            
            # Check if assignee has closed PRs
            closed_prs=$(echo "$prs_referencing_issue" | jq '[.[] | select(.state == "CLOSED" or .state == "MERGED")]')
            
            should_unassign=false
            should_warn=false
            warning_days=0
            
            if [ "$open_pr_count" -eq 0 ]; then
              if [ "$(echo "$closed_prs" | jq 'length')" -gt 0 ]; then
                # Has closed PRs - check if last closed PR was more than 24 hours ago
                latest_closed_at=$(echo "$closed_prs" | jq -r 'sort_by(.closedAt) | last | .closedAt')
                if [[ "$OSTYPE" == "darwin"* ]]; then
                  closed_time=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "${latest_closed_at}" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S" "${latest_closed_at%Z}" +%s)
                else
                  closed_time=$(date -d "$latest_closed_at" +%s)
                fi
                hours_since_closed=$(( (current_time - closed_time) / 3600 ))
                
                if [ "$hours_since_closed" -gt 24 ]; then
                  should_unassign=true
                  echo "  → Will unassign: Last PR closed $hours_since_closed hours ago (>24h)"
                fi
              else
                # No PRs at all - check assignment age
                if [ "$days_since_assignment" -ge 7 ]; then
                  should_unassign=true
                  echo "  → Will unassign: No PR created in $days_since_assignment days (≥7 days)"
                elif [ "$days_since_assignment" -ge 4 ]; then
                  should_warn=true
                  warning_days=$((7 - days_since_assignment))
                  echo "  → Will warn: $warning_days days remaining"
                fi
              fi
            else
              echo "  → Has open PR, keeping assignment"
            fi
            
            # Send warning comment
            if [ "$should_warn" = true ]; then
              warning_comment=$'⚠️ **Assignment Warning** ⚠️\n\nHi @'"$assignee"$'! This issue has been assigned to you for '"$days_since_assignment"$' days without a related PR.\n\nPlease create a pull request within the next **'"$warning_days"$' days** or the issue will be automatically unassigned to allow others to work on it.\n\nIf you\'re still working on this and need more time, please leave a comment to let us know your progress.\n\n_This is an automated message. The issue will be unassigned in '"$warning_days"$' days if no PR is created._'
              
              recent_warning=$(gh issue view "$issue_number" --json comments | jq -r '.comments[] | select(.body | contains("Assignment Warning")) | .createdAt' | tail -1)
              
              if [ -z "$recent_warning" ] || [ "$recent_warning" = "null" ]; then
                echo "  → Sending warning comment"
                gh issue comment "$issue_number" --body "$warning_comment"
              else
                if [[ "$OSTYPE" == "darwin"* ]]; then
                  warning_time=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "${recent_warning}" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S" "${recent_warning%Z}" +%s)
                else
                  warning_time=$(date -d "$recent_warning" +%s)
                fi
                hours_since_warning=$(( (current_time - warning_time) / 3600 ))
                
                if [ "$hours_since_warning" -gt 24 ]; then
                  echo "  → Sending updated warning comment"
                  gh issue comment "$issue_number" --body "$warning_comment"
                else
                  echo "  → Warning already sent recently"
                fi
              fi
            fi
            
            # Unassign if needed
            if [ "$should_unassign" = true ]; then
              unassign_comment=$'🤖 **Automatic Unassignment** 🤖\n\nThis issue has been automatically unassigned from @'"$assignee"$' due to inactivity:\n\n- No related pull request was created within 7 days of assignment, OR\n- A related pull request was closed and no new PR was opened within 24 hours\n\nThe issue is now available for others to work on. @'"$assignee"$', you\'re welcome to reassign yourself if you\'d like to continue working on this.\n\n_This is an automated action to keep issues available for active contributors._'
              
              echo "  → Unassigning issue #$issue_number from $assignee"
              gh issue edit "$issue_number" --remove-assignee "$assignee"
              gh issue comment "$issue_number" --body "$unassign_comment"
            fi
          done

      - name: Clean up temporary files
        run: rm -f assigned_issues.json
