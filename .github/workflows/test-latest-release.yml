name: Test latest release

on:
  workflow_call:
  # So we can trigger manually if needed
  workflow_dispatch:
  workflow_run:
    workflows: [goreleaser]
    types: [completed]
  push:
    branches:
      - release-*

permissions:
  contents: read

jobs:
  ginkgo-test:
    name: Tests in ginkgo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version: 1.24
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede
        id: install

      - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d

      - name: Install dependencies
        run: |
          bash <(curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/refs/tags/v0.10.1/install.sh) 0.10.1
          wget https://github.com/kubestellar/kubeflex/releases/download/v0.8.9/kubeflex_0.8.9_linux_amd64.tar.gz
          tar -xvf kubeflex_0.8.9_linux_amd64.tar.gz bin/kflex
          mv bin/kflex /usr/local/bin
          rm -fr bin kubeflex_0.8.9_linux_amd64.tar.gz
          go install github.com/onsi/ginkgo/v2/ginkgo

      - name: Run test
        run: |
          cd test/e2e
          KFLEX_DISABLE_CHATTY=true ./run-test.sh --released --test-type ginkgo --kubestellar-controller-manager-verbosity 5 --transport-controller-verbosity 5

      - name: show kubeconfig contexts
        if: always()
        run: kubectl config get-contexts

      - name: show pods in hosting cluster
        if: always()
        run: kubectl --context kind-kubeflex get pods -A

      - name: show kubestellar controller manager log
        if: always()
        run: kubectl --context kind-kubeflex logs -n wds1-system $(kubectl --context kind-kubeflex get pod -n wds1-system --selector=control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')

      - name: show transport controller log
        if: always()
        run: kubectl --context kind-kubeflex -n wds1-system logs $(kubectl --context kind-kubeflex -n wds1-system get pods -l name=transport-controller -o jsonpath='{.items[0].metadata.name}')

      - name: show bindingpolicies
        if: always()
        run: kubectl --context wds1 get bindingpolicies.control.kubestellar.io -o yaml

      - name: show deployments in wds1
        if: always()
        run: kubectl --context wds1 get deployments -A -o yaml

      - name: show bindings
        if: always()
        run: kubectl --context wds1 get bindings.control.kubestellar.io -o yaml

      - name: show deployments in cluster1
        if: always()
        run: kubectl --context cluster1 get deployments -A -o yaml

      - name: show deployments in cluster2
        if: always()
        run: kubectl --context cluster2 get deployments -A -o yaml

      - name: show manifestworks
        if: always()
        run: kubectl --context its1 get manifestworks -A -o yaml

      - name: show workstatuses
        if: always()
        run: kubectl --context its1 get workstatuses -A -o yaml

  test-bash:
    name: Test in bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version: 1.24
          cache: true

      - name: Install kubectl
        uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede
        id: install

      - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d

      - name: Install dependencies
        run: |
          bash <(curl -L https://raw.githubusercontent.com/open-cluster-management-io/clusteradm/refs/tags/v0.10.1/install.sh) 0.10.1
          wget https://github.com/kubestellar/kubeflex/releases/download/v0.8.9/kubeflex_0.8.9_linux_amd64.tar.gz
          tar -xvf kubeflex_0.8.9_linux_amd64.tar.gz bin/kflex
          mv bin/kflex /usr/local/bin
          rm -fr bin kubeflex_0.8.9_linux_amd64.tar.gz

      - name: Run test
        run: |
          cd test/e2e
          KFLEX_DISABLE_CHATTY=true ./run-test.sh --released

      - name: show kubeconfig contexts
        if: always()
        run: kubectl config get-contexts

      - name: show pods in hosting cluster
        if: always()
        run: kubectl --context kind-kubeflex get pods -A

      - name: show kubestellar controller manager log
        if: always()
        run: kubectl --context kind-kubeflex logs -n wds1-system $(kubectl --context kind-kubeflex get pod -n wds1-system --selector=control-plane=controller-manager -o jsonpath='{.items[0].metadata.name}')

      - name: show transport controller log
        if: always()
        run: kubectl --context kind-kubeflex -n wds1-system logs $(kubectl --context kind-kubeflex -n wds1-system get pods -l name=transport-controller -o jsonpath='{.items[0].metadata.name}')

      - name: show bindingpolicies
        if: always()
        run: kubectl --context wds1 get bindingpolicies.control.kubestellar.io -o yaml

      - name: show deployments in wds1
        if: always()
        run: kubectl --context wds1 get deployments -A -o yaml

      - name: show bindings
        if: always()
        run: kubectl --context wds1 get bindings.control.kubestellar.io -o yaml

      - name: show deployments in cluster1
        if: always()
        run: kubectl --context cluster1 get deployments -A -o yaml

      - name: show deployments in cluster2
        if: always()
        run: kubectl --context cluster2 get deployments -A -o yaml

      - name: show manifestworks
        if: always()
        run: kubectl --context its1 get manifestworks -A -o yaml

      - name: show workstatuses
        if: always()
        run: kubectl --context its1 get workstatuses -A -o yaml
