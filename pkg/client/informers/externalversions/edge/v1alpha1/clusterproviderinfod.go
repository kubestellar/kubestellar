//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
	scopedclientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/edge-mc/pkg/client/informers/externalversions/internalinterfaces"
	edgev1alpha1listers "github.com/kcp-dev/edge-mc/pkg/client/listers/edge/v1alpha1"
)

// ClusterProviderInfodClusterInformer provides access to a shared informer and lister for
// ClusterProviderInfods.
type ClusterProviderInfodClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterProviderInfodInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.ClusterProviderInfodClusterLister
}

type clusterProviderInfodClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterProviderInfodClusterInformer constructs a new informer for ClusterProviderInfod type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterProviderInfodClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterProviderInfodClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterProviderInfodClusterInformer constructs a new informer for ClusterProviderInfod type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterProviderInfodClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfods().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfods().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClusterProviderInfod{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterProviderInfodClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterProviderInfodClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clusterProviderInfodClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClusterProviderInfod{}, f.defaultInformer)
}

func (f *clusterProviderInfodClusterInformer) Lister() edgev1alpha1listers.ClusterProviderInfodClusterLister {
	return edgev1alpha1listers.NewClusterProviderInfodClusterLister(f.Informer().GetIndexer())
}

// ClusterProviderInfodInformer provides access to a shared informer and lister for
// ClusterProviderInfods.
type ClusterProviderInfodInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.ClusterProviderInfodLister
}

func (f *clusterProviderInfodClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterProviderInfodInformer {
	return &clusterProviderInfodInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterProviderInfodInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev1alpha1listers.ClusterProviderInfodLister
}

func (f *clusterProviderInfodInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterProviderInfodInformer) Lister() edgev1alpha1listers.ClusterProviderInfodLister {
	return f.lister
}

type clusterProviderInfodScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clusterProviderInfodScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClusterProviderInfod{}, f.defaultInformer)
}

func (f *clusterProviderInfodScopedInformer) Lister() edgev1alpha1listers.ClusterProviderInfodLister {
	return edgev1alpha1listers.NewClusterProviderInfodLister(f.Informer().GetIndexer())
}

// NewClusterProviderInfodInformer constructs a new informer for ClusterProviderInfod type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterProviderInfodInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterProviderInfodInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterProviderInfodInformer constructs a new informer for ClusterProviderInfod type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterProviderInfodInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfods().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfods().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClusterProviderInfod{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterProviderInfodScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterProviderInfodInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
