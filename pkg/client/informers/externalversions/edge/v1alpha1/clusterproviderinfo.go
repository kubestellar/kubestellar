//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
	scopedclientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/edge-mc/pkg/client/informers/externalversions/internalinterfaces"
	edgev1alpha1listers "github.com/kcp-dev/edge-mc/pkg/client/listers/edge/v1alpha1"
)

// ClusterProviderInfoClusterInformer provides access to a shared informer and lister for
// ClusterProviderInfos.
type ClusterProviderInfoClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterProviderInfoInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.ClusterProviderInfoClusterLister
}

type clusterProviderInfoClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterProviderInfoClusterInformer constructs a new informer for ClusterProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterProviderInfoClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterProviderInfoClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterProviderInfoClusterInformer constructs a new informer for ClusterProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterProviderInfoClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfos().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfos().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClusterProviderInfo{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterProviderInfoClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterProviderInfoClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clusterProviderInfoClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClusterProviderInfo{}, f.defaultInformer)
}

func (f *clusterProviderInfoClusterInformer) Lister() edgev1alpha1listers.ClusterProviderInfoClusterLister {
	return edgev1alpha1listers.NewClusterProviderInfoClusterLister(f.Informer().GetIndexer())
}

// ClusterProviderInfoInformer provides access to a shared informer and lister for
// ClusterProviderInfos.
type ClusterProviderInfoInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.ClusterProviderInfoLister
}

func (f *clusterProviderInfoClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterProviderInfoInformer {
	return &clusterProviderInfoInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterProviderInfoInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev1alpha1listers.ClusterProviderInfoLister
}

func (f *clusterProviderInfoInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterProviderInfoInformer) Lister() edgev1alpha1listers.ClusterProviderInfoLister {
	return f.lister
}

type clusterProviderInfoScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clusterProviderInfoScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClusterProviderInfo{}, f.defaultInformer)
}

func (f *clusterProviderInfoScopedInformer) Lister() edgev1alpha1listers.ClusterProviderInfoLister {
	return edgev1alpha1listers.NewClusterProviderInfoLister(f.Informer().GetIndexer())
}

// NewClusterProviderInfoInformer constructs a new informer for ClusterProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterProviderInfoInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterProviderInfoInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterProviderInfoInformer constructs a new informer for ClusterProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterProviderInfoInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfos().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderInfos().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClusterProviderInfo{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterProviderInfoScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterProviderInfoInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
