//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
	scopedclientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/edge-mc/pkg/client/informers/externalversions/internalinterfaces"
	edgev1alpha1listers "github.com/kcp-dev/edge-mc/pkg/client/listers/edge/v1alpha1"
)

// ClientProviderInfoClusterInformer provides access to a shared informer and lister for
// ClientProviderInfos.
type ClientProviderInfoClusterInformer interface {
	Cluster(logicalcluster.Name) ClientProviderInfoInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.ClientProviderInfoClusterLister
}

type clientProviderInfoClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClientProviderInfoClusterInformer constructs a new informer for ClientProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClientProviderInfoClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClientProviderInfoClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClientProviderInfoClusterInformer constructs a new informer for ClientProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClientProviderInfoClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClientProviderInfos().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClientProviderInfos().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClientProviderInfo{},
		resyncPeriod,
		indexers,
	)
}

func (f *clientProviderInfoClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClientProviderInfoClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clientProviderInfoClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClientProviderInfo{}, f.defaultInformer)
}

func (f *clientProviderInfoClusterInformer) Lister() edgev1alpha1listers.ClientProviderInfoClusterLister {
	return edgev1alpha1listers.NewClientProviderInfoClusterLister(f.Informer().GetIndexer())
}

// ClientProviderInfoInformer provides access to a shared informer and lister for
// ClientProviderInfos.
type ClientProviderInfoInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.ClientProviderInfoLister
}

func (f *clientProviderInfoClusterInformer) Cluster(clusterName logicalcluster.Name) ClientProviderInfoInformer {
	return &clientProviderInfoInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clientProviderInfoInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev1alpha1listers.ClientProviderInfoLister
}

func (f *clientProviderInfoInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clientProviderInfoInformer) Lister() edgev1alpha1listers.ClientProviderInfoLister {
	return f.lister
}

type clientProviderInfoScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clientProviderInfoScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClientProviderInfo{}, f.defaultInformer)
}

func (f *clientProviderInfoScopedInformer) Lister() edgev1alpha1listers.ClientProviderInfoLister {
	return edgev1alpha1listers.NewClientProviderInfoLister(f.Informer().GetIndexer())
}

// NewClientProviderInfoInformer constructs a new informer for ClientProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClientProviderInfoInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClientProviderInfoInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClientProviderInfoInformer constructs a new informer for ClientProviderInfo type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClientProviderInfoInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClientProviderInfos().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClientProviderInfos().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClientProviderInfo{},
		resyncPeriod,
		indexers,
	)
}

func (f *clientProviderInfoScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClientProviderInfoInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
