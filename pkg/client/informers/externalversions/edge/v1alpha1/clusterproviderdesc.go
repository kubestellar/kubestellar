//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
	scopedclientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/edge-mc/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/edge-mc/pkg/client/informers/externalversions/internalinterfaces"
	edgev1alpha1listers "github.com/kcp-dev/edge-mc/pkg/client/listers/edge/v1alpha1"
)

// ClusterProviderDescClusterInformer provides access to a shared informer and lister for
// ClusterProviderDescs.
type ClusterProviderDescClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterProviderDescInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.ClusterProviderDescClusterLister
}

type clusterProviderDescClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterProviderDescClusterInformer constructs a new informer for ClusterProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterProviderDescClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterProviderDescClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterProviderDescClusterInformer constructs a new informer for ClusterProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterProviderDescClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderDescs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderDescs().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClusterProviderDesc{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterProviderDescClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterProviderDescClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clusterProviderDescClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClusterProviderDesc{}, f.defaultInformer)
}

func (f *clusterProviderDescClusterInformer) Lister() edgev1alpha1listers.ClusterProviderDescClusterLister {
	return edgev1alpha1listers.NewClusterProviderDescClusterLister(f.Informer().GetIndexer())
}

// ClusterProviderDescInformer provides access to a shared informer and lister for
// ClusterProviderDescs.
type ClusterProviderDescInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.ClusterProviderDescLister
}

func (f *clusterProviderDescClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterProviderDescInformer {
	return &clusterProviderDescInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterProviderDescInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev1alpha1listers.ClusterProviderDescLister
}

func (f *clusterProviderDescInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterProviderDescInformer) Lister() edgev1alpha1listers.ClusterProviderDescLister {
	return f.lister
}

type clusterProviderDescScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clusterProviderDescScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.ClusterProviderDesc{}, f.defaultInformer)
}

func (f *clusterProviderDescScopedInformer) Lister() edgev1alpha1listers.ClusterProviderDescLister {
	return edgev1alpha1listers.NewClusterProviderDescLister(f.Informer().GetIndexer())
}

// NewClusterProviderDescInformer constructs a new informer for ClusterProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterProviderDescInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterProviderDescInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterProviderDescInformer constructs a new informer for ClusterProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterProviderDescInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderDescs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().ClusterProviderDescs().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.ClusterProviderDesc{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterProviderDescScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterProviderDescInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
