//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v1alpha1"
	scopedclientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned"
	clientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned/cluster"
	"github.com/kubestellar/kubestellar/pkg/client/informers/externalversions/internalinterfaces"
	edgev1alpha1listers "github.com/kubestellar/kubestellar/pkg/client/listers/edge/v1alpha1"
)

// EdgePlacementClusterInformer provides access to a shared informer and lister for
// EdgePlacements.
type EdgePlacementClusterInformer interface {
	Cluster(logicalcluster.Name) EdgePlacementInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.EdgePlacementClusterLister
}

type edgePlacementClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewEdgePlacementClusterInformer constructs a new informer for EdgePlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEdgePlacementClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEdgePlacementClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEdgePlacementClusterInformer constructs a new informer for EdgePlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEdgePlacementClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgePlacements().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgePlacements().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.EdgePlacement{},
		resyncPeriod,
		indexers,
	)
}

func (f *edgePlacementClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEdgePlacementClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *edgePlacementClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.EdgePlacement{}, f.defaultInformer)
}

func (f *edgePlacementClusterInformer) Lister() edgev1alpha1listers.EdgePlacementClusterLister {
	return edgev1alpha1listers.NewEdgePlacementClusterLister(f.Informer().GetIndexer())
}

// EdgePlacementInformer provides access to a shared informer and lister for
// EdgePlacements.
type EdgePlacementInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.EdgePlacementLister
}

func (f *edgePlacementClusterInformer) Cluster(clusterName logicalcluster.Name) EdgePlacementInformer {
	return &edgePlacementInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type edgePlacementInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev1alpha1listers.EdgePlacementLister
}

func (f *edgePlacementInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *edgePlacementInformer) Lister() edgev1alpha1listers.EdgePlacementLister {
	return f.lister
}

type edgePlacementScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *edgePlacementScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.EdgePlacement{}, f.defaultInformer)
}

func (f *edgePlacementScopedInformer) Lister() edgev1alpha1listers.EdgePlacementLister {
	return edgev1alpha1listers.NewEdgePlacementLister(f.Informer().GetIndexer())
}

// NewEdgePlacementInformer constructs a new informer for EdgePlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEdgePlacementInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredEdgePlacementInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEdgePlacementInformer constructs a new informer for EdgePlacement type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEdgePlacementInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgePlacements().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgePlacements().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.EdgePlacement{},
		resyncPeriod,
		indexers,
	)
}

func (f *edgePlacementScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredEdgePlacementInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
