//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v1alpha1"
	scopedclientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned"
	clientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned/cluster"
	"github.com/kubestellar/kubestellar/pkg/client/informers/externalversions/internalinterfaces"
	edgev1alpha1listers "github.com/kubestellar/kubestellar/pkg/client/listers/edge/v1alpha1"
)

// EdgeSyncConfigClusterInformer provides access to a shared informer and lister for
// EdgeSyncConfigs.
type EdgeSyncConfigClusterInformer interface {
	Cluster(logicalcluster.Name) EdgeSyncConfigInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.EdgeSyncConfigClusterLister
}

type edgeSyncConfigClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewEdgeSyncConfigClusterInformer constructs a new informer for EdgeSyncConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEdgeSyncConfigClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEdgeSyncConfigClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEdgeSyncConfigClusterInformer constructs a new informer for EdgeSyncConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEdgeSyncConfigClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgeSyncConfigs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgeSyncConfigs().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.EdgeSyncConfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *edgeSyncConfigClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEdgeSyncConfigClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *edgeSyncConfigClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.EdgeSyncConfig{}, f.defaultInformer)
}

func (f *edgeSyncConfigClusterInformer) Lister() edgev1alpha1listers.EdgeSyncConfigClusterLister {
	return edgev1alpha1listers.NewEdgeSyncConfigClusterLister(f.Informer().GetIndexer())
}

// EdgeSyncConfigInformer provides access to a shared informer and lister for
// EdgeSyncConfigs.
type EdgeSyncConfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.EdgeSyncConfigLister
}

func (f *edgeSyncConfigClusterInformer) Cluster(clusterName logicalcluster.Name) EdgeSyncConfigInformer {
	return &edgeSyncConfigInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type edgeSyncConfigInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev1alpha1listers.EdgeSyncConfigLister
}

func (f *edgeSyncConfigInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *edgeSyncConfigInformer) Lister() edgev1alpha1listers.EdgeSyncConfigLister {
	return f.lister
}

type edgeSyncConfigScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *edgeSyncConfigScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.EdgeSyncConfig{}, f.defaultInformer)
}

func (f *edgeSyncConfigScopedInformer) Lister() edgev1alpha1listers.EdgeSyncConfigLister {
	return edgev1alpha1listers.NewEdgeSyncConfigLister(f.Informer().GetIndexer())
}

// NewEdgeSyncConfigInformer constructs a new informer for EdgeSyncConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEdgeSyncConfigInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredEdgeSyncConfigInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEdgeSyncConfigInformer constructs a new informer for EdgeSyncConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEdgeSyncConfigInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgeSyncConfigs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().EdgeSyncConfigs().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.EdgeSyncConfig{},
		resyncPeriod,
		indexers,
	)
}

func (f *edgeSyncConfigScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredEdgeSyncConfigInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
