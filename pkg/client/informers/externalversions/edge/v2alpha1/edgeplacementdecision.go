//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v2alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev2alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v2alpha1"
	scopedclientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned"
	clientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned/cluster"
	"github.com/kubestellar/kubestellar/pkg/client/informers/externalversions/internalinterfaces"
	edgev2alpha1listers "github.com/kubestellar/kubestellar/pkg/client/listers/edge/v2alpha1"
)

// EdgePlacementDecisionClusterInformer provides access to a shared informer and lister for
// EdgePlacementDecisions.
type EdgePlacementDecisionClusterInformer interface {
	Cluster(logicalcluster.Name) EdgePlacementDecisionInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev2alpha1listers.EdgePlacementDecisionClusterLister
}

type edgePlacementDecisionClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewEdgePlacementDecisionClusterInformer constructs a new informer for EdgePlacementDecision type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEdgePlacementDecisionClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEdgePlacementDecisionClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEdgePlacementDecisionClusterInformer constructs a new informer for EdgePlacementDecision type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEdgePlacementDecisionClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().EdgePlacementDecisions().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().EdgePlacementDecisions().Watch(context.TODO(), options)
			},
		},
		&edgev2alpha1.EdgePlacementDecision{},
		resyncPeriod,
		indexers,
	)
}

func (f *edgePlacementDecisionClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEdgePlacementDecisionClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *edgePlacementDecisionClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev2alpha1.EdgePlacementDecision{}, f.defaultInformer)
}

func (f *edgePlacementDecisionClusterInformer) Lister() edgev2alpha1listers.EdgePlacementDecisionClusterLister {
	return edgev2alpha1listers.NewEdgePlacementDecisionClusterLister(f.Informer().GetIndexer())
}

// EdgePlacementDecisionInformer provides access to a shared informer and lister for
// EdgePlacementDecisions.
type EdgePlacementDecisionInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev2alpha1listers.EdgePlacementDecisionLister
}

func (f *edgePlacementDecisionClusterInformer) Cluster(clusterName logicalcluster.Name) EdgePlacementDecisionInformer {
	return &edgePlacementDecisionInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type edgePlacementDecisionInformer struct {
	informer cache.SharedIndexInformer
	lister   edgev2alpha1listers.EdgePlacementDecisionLister
}

func (f *edgePlacementDecisionInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *edgePlacementDecisionInformer) Lister() edgev2alpha1listers.EdgePlacementDecisionLister {
	return f.lister
}

type edgePlacementDecisionScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *edgePlacementDecisionScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev2alpha1.EdgePlacementDecision{}, f.defaultInformer)
}

func (f *edgePlacementDecisionScopedInformer) Lister() edgev2alpha1listers.EdgePlacementDecisionLister {
	return edgev2alpha1listers.NewEdgePlacementDecisionLister(f.Informer().GetIndexer())
}

// NewEdgePlacementDecisionInformer constructs a new informer for EdgePlacementDecision type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEdgePlacementDecisionInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredEdgePlacementDecisionInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEdgePlacementDecisionInformer constructs a new informer for EdgePlacementDecision type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEdgePlacementDecisionInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().EdgePlacementDecisions().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV2alpha1().EdgePlacementDecisions().Watch(context.TODO(), options)
			},
		},
		&edgev2alpha1.EdgePlacementDecision{},
		resyncPeriod,
		indexers,
	)
}

func (f *edgePlacementDecisionScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredEdgePlacementDecisionInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
