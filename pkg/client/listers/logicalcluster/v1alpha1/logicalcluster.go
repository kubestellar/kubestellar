//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	logicalclusterv1alpha1 "github.com/kubestellar/kubestellar/pkg/apis/logicalcluster/v1alpha1"
)

// LogicalClusterClusterLister can list LogicalClusters across all workspaces, or scope down to a LogicalClusterLister for one workspace.
// All objects returned here must be treated as read-only.
type LogicalClusterClusterLister interface {
	// List lists all LogicalClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error)
	// Cluster returns a lister that can list and get LogicalClusters in one workspace.
	Cluster(clusterName logicalcluster.Name) LogicalClusterLister
	LogicalClusterClusterListerExpansion
}

type logicalClusterClusterLister struct {
	indexer cache.Indexer
}

// NewLogicalClusterClusterLister returns a new LogicalClusterClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLogicalClusterClusterLister(indexer cache.Indexer) *logicalClusterClusterLister {
	return &logicalClusterClusterLister{indexer: indexer}
}

// List lists all LogicalClusters in the indexer across all workspaces.
func (s *logicalClusterClusterLister) List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*logicalclusterv1alpha1.LogicalCluster))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get LogicalClusters.
func (s *logicalClusterClusterLister) Cluster(clusterName logicalcluster.Name) LogicalClusterLister {
	return &logicalClusterLister{indexer: s.indexer, clusterName: clusterName}
}

// LogicalClusterLister can list LogicalClusters across all namespaces, or scope down to a LogicalClusterNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type LogicalClusterLister interface {
	// List lists all LogicalClusters in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error)
	// LogicalClusters returns a lister that can list and get LogicalClusters in one workspace and namespace.
	LogicalClusters(namespace string) LogicalClusterNamespaceLister
	LogicalClusterListerExpansion
}

// logicalClusterLister can list all LogicalClusters inside a workspace or scope down to a LogicalClusterLister for one namespace.
type logicalClusterLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all LogicalClusters in the indexer for a workspace.
func (s *logicalClusterLister) List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*logicalclusterv1alpha1.LogicalCluster))
	})
	return ret, err
}

// LogicalClusters returns an object that can list and get LogicalClusters in one namespace.
func (s *logicalClusterLister) LogicalClusters(namespace string) LogicalClusterNamespaceLister {
	return &logicalClusterNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// logicalClusterNamespaceLister helps list and get LogicalClusters.
// All objects returned here must be treated as read-only.
type LogicalClusterNamespaceLister interface {
	// List lists all LogicalClusters in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error)
	// Get retrieves the LogicalCluster from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*logicalclusterv1alpha1.LogicalCluster, error)
	LogicalClusterNamespaceListerExpansion
}

// logicalClusterNamespaceLister helps list and get LogicalClusters.
// All objects returned here must be treated as read-only.
type logicalClusterNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all LogicalClusters in the indexer for a given workspace and namespace.
func (s *logicalClusterNamespaceLister) List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*logicalclusterv1alpha1.LogicalCluster))
	})
	return ret, err
}

// Get retrieves the LogicalCluster from the indexer for a given workspace, namespace and name.
func (s *logicalClusterNamespaceLister) Get(name string) (*logicalclusterv1alpha1.LogicalCluster, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(logicalclusterv1alpha1.Resource("LogicalCluster"), name)
	}
	return obj.(*logicalclusterv1alpha1.LogicalCluster), nil
}

// NewLogicalClusterLister returns a new LogicalClusterLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewLogicalClusterLister(indexer cache.Indexer) *logicalClusterScopedLister {
	return &logicalClusterScopedLister{indexer: indexer}
}

// logicalClusterScopedLister can list all LogicalClusters inside a workspace or scope down to a LogicalClusterLister for one namespace.
type logicalClusterScopedLister struct {
	indexer cache.Indexer
}

// List lists all LogicalClusters in the indexer for a workspace.
func (s *logicalClusterScopedLister) List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*logicalclusterv1alpha1.LogicalCluster))
	})
	return ret, err
}

// LogicalClusters returns an object that can list and get LogicalClusters in one namespace.
func (s *logicalClusterScopedLister) LogicalClusters(namespace string) LogicalClusterNamespaceLister {
	return &logicalClusterScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// logicalClusterScopedNamespaceLister helps list and get LogicalClusters.
type logicalClusterScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogicalClusters in the indexer for a given workspace and namespace.
func (s *logicalClusterScopedNamespaceLister) List(selector labels.Selector) (ret []*logicalclusterv1alpha1.LogicalCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*logicalclusterv1alpha1.LogicalCluster))
	})
	return ret, err
}

// Get retrieves the LogicalCluster from the indexer for a given workspace, namespace and name.
func (s *logicalClusterScopedNamespaceLister) Get(name string) (*logicalclusterv1alpha1.LogicalCluster, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(logicalclusterv1alpha1.Resource("LogicalCluster"), name)
	}
	return obj.(*logicalclusterv1alpha1.LogicalCluster), nil
}
