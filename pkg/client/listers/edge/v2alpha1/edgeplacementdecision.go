//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v2alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev2alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v2alpha1"
)

// EdgePlacementDecisionClusterLister can list EdgePlacementDecisions across all workspaces, or scope down to a EdgePlacementDecisionLister for one workspace.
// All objects returned here must be treated as read-only.
type EdgePlacementDecisionClusterLister interface {
	// List lists all EdgePlacementDecisions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev2alpha1.EdgePlacementDecision, err error)
	// Cluster returns a lister that can list and get EdgePlacementDecisions in one workspace.
	Cluster(clusterName logicalcluster.Name) EdgePlacementDecisionLister
	EdgePlacementDecisionClusterListerExpansion
}

type edgePlacementDecisionClusterLister struct {
	indexer cache.Indexer
}

// NewEdgePlacementDecisionClusterLister returns a new EdgePlacementDecisionClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewEdgePlacementDecisionClusterLister(indexer cache.Indexer) *edgePlacementDecisionClusterLister {
	return &edgePlacementDecisionClusterLister{indexer: indexer}
}

// List lists all EdgePlacementDecisions in the indexer across all workspaces.
func (s *edgePlacementDecisionClusterLister) List(selector labels.Selector) (ret []*edgev2alpha1.EdgePlacementDecision, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev2alpha1.EdgePlacementDecision))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get EdgePlacementDecisions.
func (s *edgePlacementDecisionClusterLister) Cluster(clusterName logicalcluster.Name) EdgePlacementDecisionLister {
	return &edgePlacementDecisionLister{indexer: s.indexer, clusterName: clusterName}
}

// EdgePlacementDecisionLister can list all EdgePlacementDecisions, or get one in particular.
// All objects returned here must be treated as read-only.
type EdgePlacementDecisionLister interface {
	// List lists all EdgePlacementDecisions in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev2alpha1.EdgePlacementDecision, err error)
	// Get retrieves the EdgePlacementDecision from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev2alpha1.EdgePlacementDecision, error)
	EdgePlacementDecisionListerExpansion
}

// edgePlacementDecisionLister can list all EdgePlacementDecisions inside a workspace.
type edgePlacementDecisionLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all EdgePlacementDecisions in the indexer for a workspace.
func (s *edgePlacementDecisionLister) List(selector labels.Selector) (ret []*edgev2alpha1.EdgePlacementDecision, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev2alpha1.EdgePlacementDecision))
	})
	return ret, err
}

// Get retrieves the EdgePlacementDecision from the indexer for a given workspace and name.
func (s *edgePlacementDecisionLister) Get(name string) (*edgev2alpha1.EdgePlacementDecision, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev2alpha1.Resource("EdgePlacementDecision"), name)
	}
	return obj.(*edgev2alpha1.EdgePlacementDecision), nil
}

// NewEdgePlacementDecisionLister returns a new EdgePlacementDecisionLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewEdgePlacementDecisionLister(indexer cache.Indexer) *edgePlacementDecisionScopedLister {
	return &edgePlacementDecisionScopedLister{indexer: indexer}
}

// edgePlacementDecisionScopedLister can list all EdgePlacementDecisions inside a workspace.
type edgePlacementDecisionScopedLister struct {
	indexer cache.Indexer
}

// List lists all EdgePlacementDecisions in the indexer for a workspace.
func (s *edgePlacementDecisionScopedLister) List(selector labels.Selector) (ret []*edgev2alpha1.EdgePlacementDecision, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev2alpha1.EdgePlacementDecision))
	})
	return ret, err
}

// Get retrieves the EdgePlacementDecision from the indexer for a given workspace and name.
func (s *edgePlacementDecisionScopedLister) Get(name string) (*edgev2alpha1.EdgePlacementDecision, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev2alpha1.Resource("EdgePlacementDecision"), name)
	}
	return obj.(*edgev2alpha1.EdgePlacementDecision), nil
}
