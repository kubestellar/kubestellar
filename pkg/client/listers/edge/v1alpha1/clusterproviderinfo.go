//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
)

// ClusterProviderInfoClusterLister can list ClusterProviderInfos across all workspaces, or scope down to a ClusterProviderInfoLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterProviderInfoClusterLister interface {
	// List lists all ClusterProviderInfos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfo, err error)
	// Cluster returns a lister that can list and get ClusterProviderInfos in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterProviderInfoLister
	ClusterProviderInfoClusterListerExpansion
}

type clusterProviderInfoClusterLister struct {
	indexer cache.Indexer
}

// NewClusterProviderInfoClusterLister returns a new ClusterProviderInfoClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterProviderInfoClusterLister(indexer cache.Indexer) *clusterProviderInfoClusterLister {
	return &clusterProviderInfoClusterLister{indexer: indexer}
}

// List lists all ClusterProviderInfos in the indexer across all workspaces.
func (s *clusterProviderInfoClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.ClusterProviderInfo))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterProviderInfos.
func (s *clusterProviderInfoClusterLister) Cluster(clusterName logicalcluster.Name) ClusterProviderInfoLister {
	return &clusterProviderInfoLister{indexer: s.indexer, clusterName: clusterName}
}

// ClusterProviderInfoLister can list all ClusterProviderInfos, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterProviderInfoLister interface {
	// List lists all ClusterProviderInfos in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfo, err error)
	// Get retrieves the ClusterProviderInfo from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.ClusterProviderInfo, error)
	ClusterProviderInfoListerExpansion
}

// clusterProviderInfoLister can list all ClusterProviderInfos inside a workspace.
type clusterProviderInfoLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ClusterProviderInfos in the indexer for a workspace.
func (s *clusterProviderInfoLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfo, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClusterProviderInfo))
	})
	return ret, err
}

// Get retrieves the ClusterProviderInfo from the indexer for a given workspace and name.
func (s *clusterProviderInfoLister) Get(name string) (*edgev1alpha1.ClusterProviderInfo, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClusterProviderInfo"), name)
	}
	return obj.(*edgev1alpha1.ClusterProviderInfo), nil
}

// NewClusterProviderInfoLister returns a new ClusterProviderInfoLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewClusterProviderInfoLister(indexer cache.Indexer) *clusterProviderInfoScopedLister {
	return &clusterProviderInfoScopedLister{indexer: indexer}
}

// clusterProviderInfoScopedLister can list all ClusterProviderInfos inside a workspace.
type clusterProviderInfoScopedLister struct {
	indexer cache.Indexer
}

// List lists all ClusterProviderInfos in the indexer for a workspace.
func (s *clusterProviderInfoScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClusterProviderInfo))
	})
	return ret, err
}

// Get retrieves the ClusterProviderInfo from the indexer for a given workspace and name.
func (s *clusterProviderInfoScopedLister) Get(name string) (*edgev1alpha1.ClusterProviderInfo, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClusterProviderInfo"), name)
	}
	return obj.(*edgev1alpha1.ClusterProviderInfo), nil
}
