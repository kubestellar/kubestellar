//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
)

// ClusterProviderConfigClusterLister can list ClusterProviderConfigs across all workspaces, or scope down to a ClusterProviderConfigLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterProviderConfigClusterLister interface {
	// List lists all ClusterProviderConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderConfig, err error)
	// Cluster returns a lister that can list and get ClusterProviderConfigs in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterProviderConfigLister
	ClusterProviderConfigClusterListerExpansion
}

type clusterProviderConfigClusterLister struct {
	indexer cache.Indexer
}

// NewClusterProviderConfigClusterLister returns a new ClusterProviderConfigClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterProviderConfigClusterLister(indexer cache.Indexer) *clusterProviderConfigClusterLister {
	return &clusterProviderConfigClusterLister{indexer: indexer}
}

// List lists all ClusterProviderConfigs in the indexer across all workspaces.
func (s *clusterProviderConfigClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.ClusterProviderConfig))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterProviderConfigs.
func (s *clusterProviderConfigClusterLister) Cluster(clusterName logicalcluster.Name) ClusterProviderConfigLister {
	return &clusterProviderConfigLister{indexer: s.indexer, clusterName: clusterName}
}

// ClusterProviderConfigLister can list all ClusterProviderConfigs, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterProviderConfigLister interface {
	// List lists all ClusterProviderConfigs in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderConfig, err error)
	// Get retrieves the ClusterProviderConfig from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.ClusterProviderConfig, error)
	ClusterProviderConfigListerExpansion
}

// clusterProviderConfigLister can list all ClusterProviderConfigs inside a workspace.
type clusterProviderConfigLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ClusterProviderConfigs in the indexer for a workspace.
func (s *clusterProviderConfigLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderConfig, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClusterProviderConfig))
	})
	return ret, err
}

// Get retrieves the ClusterProviderConfig from the indexer for a given workspace and name.
func (s *clusterProviderConfigLister) Get(name string) (*edgev1alpha1.ClusterProviderConfig, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClusterProviderConfig"), name)
	}
	return obj.(*edgev1alpha1.ClusterProviderConfig), nil
}

// NewClusterProviderConfigLister returns a new ClusterProviderConfigLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewClusterProviderConfigLister(indexer cache.Indexer) *clusterProviderConfigScopedLister {
	return &clusterProviderConfigScopedLister{indexer: indexer}
}

// clusterProviderConfigScopedLister can list all ClusterProviderConfigs inside a workspace.
type clusterProviderConfigScopedLister struct {
	indexer cache.Indexer
}

// List lists all ClusterProviderConfigs in the indexer for a workspace.
func (s *clusterProviderConfigScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClusterProviderConfig))
	})
	return ret, err
}

// Get retrieves the ClusterProviderConfig from the indexer for a given workspace and name.
func (s *clusterProviderConfigScopedLister) Get(name string) (*edgev1alpha1.ClusterProviderConfig, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClusterProviderConfig"), name)
	}
	return obj.(*edgev1alpha1.ClusterProviderConfig), nil
}
