//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
)

// ClusterProviderInfodClusterLister can list ClusterProviderInfods across all workspaces, or scope down to a ClusterProviderInfodLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterProviderInfodClusterLister interface {
	// List lists all ClusterProviderInfods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfod, err error)
	// Cluster returns a lister that can list and get ClusterProviderInfods in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterProviderInfodLister
	ClusterProviderInfodClusterListerExpansion
}

type clusterProviderInfodClusterLister struct {
	indexer cache.Indexer
}

// NewClusterProviderInfodClusterLister returns a new ClusterProviderInfodClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterProviderInfodClusterLister(indexer cache.Indexer) *clusterProviderInfodClusterLister {
	return &clusterProviderInfodClusterLister{indexer: indexer}
}

// List lists all ClusterProviderInfods in the indexer across all workspaces.
func (s *clusterProviderInfodClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfod, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.ClusterProviderInfod))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterProviderInfods.
func (s *clusterProviderInfodClusterLister) Cluster(clusterName logicalcluster.Name) ClusterProviderInfodLister {
	return &clusterProviderInfodLister{indexer: s.indexer, clusterName: clusterName}
}

// ClusterProviderInfodLister can list all ClusterProviderInfods, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterProviderInfodLister interface {
	// List lists all ClusterProviderInfods in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfod, err error)
	// Get retrieves the ClusterProviderInfod from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.ClusterProviderInfod, error)
	ClusterProviderInfodListerExpansion
}

// clusterProviderInfodLister can list all ClusterProviderInfods inside a workspace.
type clusterProviderInfodLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ClusterProviderInfods in the indexer for a workspace.
func (s *clusterProviderInfodLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfod, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClusterProviderInfod))
	})
	return ret, err
}

// Get retrieves the ClusterProviderInfod from the indexer for a given workspace and name.
func (s *clusterProviderInfodLister) Get(name string) (*edgev1alpha1.ClusterProviderInfod, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClusterProviderInfod"), name)
	}
	return obj.(*edgev1alpha1.ClusterProviderInfod), nil
}

// NewClusterProviderInfodLister returns a new ClusterProviderInfodLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewClusterProviderInfodLister(indexer cache.Indexer) *clusterProviderInfodScopedLister {
	return &clusterProviderInfodScopedLister{indexer: indexer}
}

// clusterProviderInfodScopedLister can list all ClusterProviderInfods inside a workspace.
type clusterProviderInfodScopedLister struct {
	indexer cache.Indexer
}

// List lists all ClusterProviderInfods in the indexer for a workspace.
func (s *clusterProviderInfodScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClusterProviderInfod, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClusterProviderInfod))
	})
	return ret, err
}

// Get retrieves the ClusterProviderInfod from the indexer for a given workspace and name.
func (s *clusterProviderInfodScopedLister) Get(name string) (*edgev1alpha1.ClusterProviderInfod, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClusterProviderInfod"), name)
	}
	return obj.(*edgev1alpha1.ClusterProviderInfod), nil
}
