//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kcp-dev/edge-mc/pkg/apis/edge/v1alpha1"
)

// ClientProviderInfoClusterLister can list ClientProviderInfos across all workspaces, or scope down to a ClientProviderInfoLister for one workspace.
// All objects returned here must be treated as read-only.
type ClientProviderInfoClusterLister interface {
	// List lists all ClientProviderInfos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClientProviderInfo, err error)
	// Cluster returns a lister that can list and get ClientProviderInfos in one workspace.
	Cluster(clusterName logicalcluster.Name) ClientProviderInfoLister
	ClientProviderInfoClusterListerExpansion
}

type clientProviderInfoClusterLister struct {
	indexer cache.Indexer
}

// NewClientProviderInfoClusterLister returns a new ClientProviderInfoClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClientProviderInfoClusterLister(indexer cache.Indexer) *clientProviderInfoClusterLister {
	return &clientProviderInfoClusterLister{indexer: indexer}
}

// List lists all ClientProviderInfos in the indexer across all workspaces.
func (s *clientProviderInfoClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClientProviderInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.ClientProviderInfo))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClientProviderInfos.
func (s *clientProviderInfoClusterLister) Cluster(clusterName logicalcluster.Name) ClientProviderInfoLister {
	return &clientProviderInfoLister{indexer: s.indexer, clusterName: clusterName}
}

// ClientProviderInfoLister can list all ClientProviderInfos, or get one in particular.
// All objects returned here must be treated as read-only.
type ClientProviderInfoLister interface {
	// List lists all ClientProviderInfos in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.ClientProviderInfo, err error)
	// Get retrieves the ClientProviderInfo from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.ClientProviderInfo, error)
	ClientProviderInfoListerExpansion
}

// clientProviderInfoLister can list all ClientProviderInfos inside a workspace.
type clientProviderInfoLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all ClientProviderInfos in the indexer for a workspace.
func (s *clientProviderInfoLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClientProviderInfo, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClientProviderInfo))
	})
	return ret, err
}

// Get retrieves the ClientProviderInfo from the indexer for a given workspace and name.
func (s *clientProviderInfoLister) Get(name string) (*edgev1alpha1.ClientProviderInfo, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClientProviderInfo"), name)
	}
	return obj.(*edgev1alpha1.ClientProviderInfo), nil
}

// NewClientProviderInfoLister returns a new ClientProviderInfoLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewClientProviderInfoLister(indexer cache.Indexer) *clientProviderInfoScopedLister {
	return &clientProviderInfoScopedLister{indexer: indexer}
}

// clientProviderInfoScopedLister can list all ClientProviderInfos inside a workspace.
type clientProviderInfoScopedLister struct {
	indexer cache.Indexer
}

// List lists all ClientProviderInfos in the indexer for a workspace.
func (s *clientProviderInfoScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.ClientProviderInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.ClientProviderInfo))
	})
	return ret, err
}

// Get retrieves the ClientProviderInfo from the indexer for a given workspace and name.
func (s *clientProviderInfoScopedLister) Get(name string) (*edgev1alpha1.ClientProviderInfo, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("ClientProviderInfo"), name)
	}
	return obj.(*edgev1alpha1.ClientProviderInfo), nil
}
