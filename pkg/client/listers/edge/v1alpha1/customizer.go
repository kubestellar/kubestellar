//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	edgev1alpha1 "github.com/kubestellar/kubestellar/pkg/apis/edge/v1alpha1"
)

// CustomizerClusterLister can list Customizers across all workspaces, or scope down to a CustomizerLister for one workspace.
// All objects returned here must be treated as read-only.
type CustomizerClusterLister interface {
	// List lists all Customizers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error)
	// Cluster returns a lister that can list and get Customizers in one workspace.
	Cluster(clusterName logicalcluster.Name) CustomizerLister
	CustomizerClusterListerExpansion
}

type customizerClusterLister struct {
	indexer cache.Indexer
}

// NewCustomizerClusterLister returns a new CustomizerClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCustomizerClusterLister(indexer cache.Indexer) *customizerClusterLister {
	return &customizerClusterLister{indexer: indexer}
}

// List lists all Customizers in the indexer across all workspaces.
func (s *customizerClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.Customizer))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Customizers.
func (s *customizerClusterLister) Cluster(clusterName logicalcluster.Name) CustomizerLister {
	return &customizerLister{indexer: s.indexer, clusterName: clusterName}
}

// CustomizerLister can list Customizers across all namespaces, or scope down to a CustomizerNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type CustomizerLister interface {
	// List lists all Customizers in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error)
	// Customizers returns a lister that can list and get Customizers in one workspace and namespace.
	Customizers(namespace string) CustomizerNamespaceLister
	CustomizerListerExpansion
}

// customizerLister can list all Customizers inside a workspace or scope down to a CustomizerLister for one namespace.
type customizerLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Customizers in the indexer for a workspace.
func (s *customizerLister) List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Customizer))
	})
	return ret, err
}

// Customizers returns an object that can list and get Customizers in one namespace.
func (s *customizerLister) Customizers(namespace string) CustomizerNamespaceLister {
	return &customizerNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// customizerNamespaceLister helps list and get Customizers.
// All objects returned here must be treated as read-only.
type CustomizerNamespaceLister interface {
	// List lists all Customizers in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error)
	// Get retrieves the Customizer from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.Customizer, error)
	CustomizerNamespaceListerExpansion
}

// customizerNamespaceLister helps list and get Customizers.
// All objects returned here must be treated as read-only.
type customizerNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Customizers in the indexer for a given workspace and namespace.
func (s *customizerNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Customizer))
	})
	return ret, err
}

// Get retrieves the Customizer from the indexer for a given workspace, namespace and name.
func (s *customizerNamespaceLister) Get(name string) (*edgev1alpha1.Customizer, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Customizer"), name)
	}
	return obj.(*edgev1alpha1.Customizer), nil
}

// NewCustomizerLister returns a new CustomizerLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewCustomizerLister(indexer cache.Indexer) *customizerScopedLister {
	return &customizerScopedLister{indexer: indexer}
}

// customizerScopedLister can list all Customizers inside a workspace or scope down to a CustomizerLister for one namespace.
type customizerScopedLister struct {
	indexer cache.Indexer
}

// List lists all Customizers in the indexer for a workspace.
func (s *customizerScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Customizer))
	})
	return ret, err
}

// Customizers returns an object that can list and get Customizers in one namespace.
func (s *customizerScopedLister) Customizers(namespace string) CustomizerNamespaceLister {
	return &customizerScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// customizerScopedNamespaceLister helps list and get Customizers.
type customizerScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Customizers in the indexer for a given workspace and namespace.
func (s *customizerScopedNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Customizer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Customizer))
	})
	return ret, err
}

// Get retrieves the Customizer from the indexer for a given workspace, namespace and name.
func (s *customizerScopedNamespaceLister) Get(name string) (*edgev1alpha1.Customizer, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Customizer"), name)
	}
	return obj.(*edgev1alpha1.Customizer), nil
}
