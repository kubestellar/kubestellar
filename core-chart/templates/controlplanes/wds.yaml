{{- range .Values.WDSes }}
{{- $ITSName := .ITSName }}
{{- $ITSSecretName := "" }}
{{- $ITSSecretNamespace := "" }}
{{- $ITSkubeconfig := "" }}
{{- if not $ITSName }}
  {{- $ITSes := (hasKey $.Values "ITSes") | ternary $.Values.ITSes (list) }}
  {{- if and $ITSes (gt (len $ITSes) 1) }}
    {{- fail "Too many ITSes found in the current chart!" }}
  {{- else if and $ITSes (eq (len $ITSes) 1) }}
    {{- $ITSName = (index $ITSes 0).name }}
    {{- $ITSSecretName = or (eq (index $ITSes 0).type "host") (eq (index $ITSes 0).type "external") | ternary "admin-kubeconfig" "vc-vcluster" }}
    {{- $ITSSecretNamespace = printf "%s-system" $ITSName }}
    {{- $ITSkubeconfig = or (eq (index $ITSes 0).type "host") (eq (index $ITSes 0).type "external") | ternary "kubeconfig-incluster" "config-incluster" }}
  {{- else }}
    {{- $allCPs := lookup "tenancy.kflex.kubestellar.org/v1alpha1" "ControlPlane" "" "" }}
    {{- $ITSes := dict }}
    {{- $count := 0 }}
    {{- range $i, $item := $allCPs.items }}
      {{- $label := get $item.metadata.labels "kflex.kubestellar.io/cptype" }}
      {{- if eq $label "its" }}
        {{- $_ := set $ITSes (printf "%d" $count) $item }}
        {{- $count = add $count 1 }}
      {{- end }}
    {{- end }}
    {{- if gt $count 1 }}
      {{- fail "Too many ITSes found in the cluster!" }}
    {{- else if eq $count 1 }}
      {{- $ITSName = get (index $ITSes "0").metadata "name" }}
      {{- $ITSSecretName = (index $ITSes "0").status.secretRef.name }}
      {{- $ITSSecretNamespace = (index $ITSes "0").status.secretRef.namespace }}
      {{- $ITSkubeconfig = (index $ITSes "0").status.secretRef.inClusterKey }}
    {{- else }}
      {{- fail "No ITS found in the current chart or in the cluster!" }}
    {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: tenancy.kflex.kubestellar.org/v1alpha1
kind: ControlPlane
metadata:
  name: {{ .name }}
spec:
  backend: shared
  type: {{ .type | default "k8s" }}
  waitForPostCreateHooks: true
  postCreateHooks:
    - hookName: kubestellar-controller
      vars:
        APIGroups: '{{ .APIGroups | default "" }}'
    - hookName: transport-controller
  globalVars:
    ControlPlaneName: {{ .name }}
    ITSName: '{{ $ITSName }}'
    ITSSecretName: '{{ $ITSSecretName }}'
    ITSSecretNamespace: '{{ $ITSSecretNamespace }}'
    ITSkubeconfig: '{{ $ITSkubeconfig }}'
{{- end }}
