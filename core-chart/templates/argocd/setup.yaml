{{- if index .Values "argocd" "install" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-argocd-kubestellar-setup"
data:
  # This script is used by the "{{ .Release.Name }}-argocd-kubestellar-setup" job to
  # 1. register KubeStellar WDSes as Argo CD target clusters
  # 2. create any Argo CD application listed in KubeStelar values
  argocd-setup.sh: |
    #!/usr/bin/env bash
    set -e

    WAIT_BEFORE_RETRY=5
    NS={{ .Release.Namespace }}

    timestamped_echo() {
      echo "[$(date +"%Y-%m-%d %H:%M:%S")] $1"
    }

    timestamped_echo "Using namespace: $NS"

    timestamped_echo "Getting Argo CD pod name..."
    ARGOCD_POD=""
    while [ -z "$ARGOCD_POD" ]; do
      ARGOCD_POD=$(kubectl -n $NS get pods -l app.kubernetes.io/name=argocd-server -o 'jsonpath={.items[0].metadata.name}' 2> /dev/null || true)
      if [ -z "$ARGOCD_POD" ]; then
        >&2 timestamped_echo "==> ERROR: Argo CD pod not found! ...retrying in $WAIT_BEFORE_RETRY seconds..."
        sleep $WAIT_BEFORE_RETRY
      fi
    done
    timestamped_echo "==> Argo CD pod found: $ARGOCD_POD"

    timestamped_echo "Waiting for Argo CD pod to be ready..."

    until kubectl -n $NS wait --for=condition=Ready pod/$ARGOCD_POD --timeout=${WAIT_BEFORE_RETRY}s
    do
      >&2 timestamped_echo "==> ERROR: Argo CD pod is not ready yet! ...retrying..."
    done
    timestamped_echo "==> Argo CD pod shows condition Ready."

    timestamped_echo "Getting Argo CD admin password..."
    ARGOCD_PASSWD=""
    while [ -z "$ARGOCD_PASSWD" ]; do
      ARGOCD_PASSWD=$(kubectl -n $NS get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2> /dev/null || true)
      if [ -z "$ARGOCD_PASSWD" ]; then
        >&2 timestamped_echo "==> ERROR: Argo CD password secret not found! ...retrying in $WAIT_BEFORE_RETRY seconds..."
        sleep $WAIT_BEFORE_RETRY
      fi
    done
    timestamped_echo "==> Argo CD admin password retrieved."

    timestamped_echo "Logging into Argo CD cli..."
    while ! kubectl -n $NS exec $ARGOCD_POD -- argocd login "{{ .Release.Name }}-argocd-server.$NS" --username admin --password $(echo $ARGOCD_PASSWD | base64 -d) --insecure ; do
      >&2 timestamped_echo "==> ERROR: Argo CD login failed! ...retrying in $WAIT_BEFORE_RETRY seconds..."
      sleep $WAIT_BEFORE_RETRY
    done
    timestamped_echo "==> Argo CD login succesful."

    timestamped_echo "Adding WDS clusters..."
    {{- range $cp := .Values.WDSes }}

      cp_name={{ $cp.name }}

      timestamped_echo "==> Looking for Control Plane \"$cp_name\"..."
      # Wait for the CP to exists and be ready
      while [[ $(kubectl get controlplane $cp_name -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
        >&2 timestamped_echo "==> ERROR: Control Plane \"$cp_name\" is not ready! ...retrying in $WAIT_BEFORE_RETRY seconds..."
        sleep $WAIT_BEFORE_RETRY
      done
      timestamped_echo "==> Control Plane \"$cp_name\" is ready."

      # determine the secret name and namespace
      key=$(kubectl get controlplane $cp_name -o=jsonpath='{.status.secretRef.inClusterKey}')
      secret_name=$(kubectl get controlplane $cp_name -o=jsonpath='{.status.secretRef.name}')
      secret_namespace=$(kubectl get controlplane $cp_name -o=jsonpath='{.status.secretRef.namespace}')

      kubeconfig="/tmp/${cp_name}.kubeconfig"

      timestamped_echo "==> Populating \"$kubeconfig\" from key \"$key\" in secret \"$secret_name\" in namespace \"$secret_namespace\" for control plane \"$cp_name\""
      kubectl get secret $secret_name -n $secret_namespace -o=jsonpath="{.data.$key}" | base64 -d > "$kubeconfig"

      timestamped_echo "==> Copying kubeconfig \"$kubeconfig\" to Argo CD pod \"$ARGOCD_POD\"..."
      kubectl -n $NS cp "$kubeconfig" ${ARGOCD_POD}:/tmp
      rm "$kubeconfig"

      timestamped_echo "==> Registering Control Plane \"$cp_name\" as an Argo CD cluster..."
      kubectl -n $NS exec $ARGOCD_POD -- argocd cluster add ${cp_name} -y --kubeconfig "$kubeconfig"
      kubectl -n $NS exec $ARGOCD_POD -- rm "$kubeconfig"

    {{- end }}

    timestamped_echo "Creating applications..."
    {{- range $app := (index .Values "argocd" "applications") }}

      timestamped_echo "==> Creating application \"{{ $app.name }}\":"
      timestamped_echo "    - project=\"{{ $app.project | default "default" }}\""
      timestamped_echo "    - repoURL=\"{{ $app.repoURL }}\""
      timestamped_echo "    - targetRevision=\"{{ $app.targetRevision | default "HEAD" }}\""
      timestamped_echo "    - path=\"{{ $app.path | default "/" }}\""
      timestamped_echo "    - destinationWDS=\"{{ $app.destinationWDS }}\""
      timestamped_echo "    - destinationNamespace=\"{{ $app.destinationNamespace | default "default" }}\""
      timestamped_echo "    - syncPolicy=\"{{ $app.syncPolicy | default "manual" }}\""

      kubectl exec $ARGOCD_POD -- argocd app create "{{ $app.name }}" \
        --project "{{ $app.project | default "default" }}" \
        --repo "{{ $app.repoURL }}" \
        --revision "{{ $app.targetRevision | default "HEAD" }}" \
        --path "{{ $app.path | default "/" }}" \
        --dest-name "{{ $app.destinationWDS }}" \
        --dest-namespace "{{ $app.destinationNamespace | default "default" }}" \
        --sync-option CreateNamespace=true \
        --sync-policy "{{ $app.syncPolicy | default "manual" }}" || true

    {{- end }}

    timestamped_echo "Done."
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-argocd-kubestellar-setup"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "5" # IMPORTANT: set this weight higher than KubeFlex post-install hook, otherwise postgresql will not install
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never # OnFailure
      securityContext:
        runAsNonRoot: true
      serviceAccountName: "{{ .Release.Name }}-argocd-kubestellar-setup"
      containers:
      - name: add-wds-clusters
        image: quay.io/kubestellar/kubectl:{{.Values.KUBECTL_VERSION}}
        command: [ "/bin/bash", "/mnt/script/argocd-setup.sh" ]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: script
          mountPath: /mnt/script
          readOnly: true
      volumes:
      - name: script
        configMap:
          name: "{{ .Release.Name }}-argocd-kubestellar-setup"
          defaultMode: 0744
{{- end }}
