#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# SM_CONFIG should be set before calling this script

space_name=""
resource_to_bind=""
cm_namespace=kubestellar # the namespace where the configmaps live in on the provider side
kb_dir=/tmp/kubestellar-kube-bind-files

in_cluster=
if $IN_CLUSTER; then
    in_cluster="--in-cluster"
fi 

while (( $# > 0 )); do
    case "$1" in
    (-h|--help)
        echo "Usage: $0 [-X] space_name resource_to_bind"
        echo "space_name is the name of a kube-bind consumer space, the space currently must be a direct child of the kcp 'root' workspace, note that space_name doesn't contain the 'root:' prefix"
        echo "resource_to_bind is a resource offered by the kube-bind provider, in lower case and plural form"
        exit 0;;
    (-X)
        set -o xtrace;;
    (-*)
        echo "$0: flag syntax error" >&2
        exit 1;;
    (*)
        if [ -z "$space_name" ]
        then space_name="$1"
        elif [ -z "$resource_to_bind" ]
        then resource_to_bind="$1"
        else echo "$0: too many positional arguments" >&2; exit 1
        fi
    esac
    shift
done

if [ -z "$space_name" ]
then
    echo "space_name not specified" >&2
    exit 1
fi

if [ -z "$resource_to_bind" ]
then
    echo "resource_to_bind not specified" >&2
    exit 1
fi

space_conf_file="/tmp/$space_name.conf"
kubectl-kubestellar-get-config-for-space --space-name $space_name --sm-core-config $SM_CONFIG --sm-context $SM_CONTEXT $in_cluster --output $space_conf_file
KUBECONFIG=$space_conf_file

if kubectl get crd $resource_to_bind.edge.kubestellar.io &> /dev/null; then
    echo "CRD for $resource_to_bind already in place"
    exit 0
fi

mkdir -p $kb_dir
konnector_log_file=$kb_dir/kube-bind-konnector-$space_name.log

if pgrep konnector | xargs ps e -p 2>/dev/null | egrep "KB_CONSUMER=$space_name(\s|$)" &> /dev/null; then
    echo "kube-bind konnector for space $space_name already running"
else
    if ! kubectl get namespace kube-system &> /dev/null
    then kubectl create namespace kube-system &> /dev/null
    fi
    echo "starting kube-bind konnector for space $space_name in background, logs writing to $konnector_log_file"
    KB_CONSUMER=$space_name konnector &> $konnector_log_file &
    sleep 10
    if ! pgrep konnector &> /dev/null; then
        cat $konnector_log_file
        echo "Error: kube-bind konnector process not found" >&2
        exit 1
    fi
fi

request_file=$kb_dir/$resource_to_bind-request.yaml
trap 'rm $request_file' EXIT

echo "binding $resource_to_bind for $space_name"
if ! result="$(kubectl bind http://127.0.0.1:8080/export --dry-run --skip-konnector --unattended --resource $resource_to_bind 2>&1 1>$request_file)"; then
    echo "Error occurred during binding $resource_to_bind for $space_name" >&2
    echo "Result of kubectl bind: $result" >&2
    echo "Tail of konnector's log at $konnector_log_file:" >&2
    tail $konnector_log_file >&2
    exit 1
fi

cluster_ns="$(echo $result | grep -e 'kube-bind-\w*' -o)"
if [ -z "$cluster_ns" ]
then
    echo "Failed to find the cluster namespace, result of 'kubectl bind': $result" >&2
    exit 1
else
    echo "cluster namespace is $cluster_ns"
fi

kubectl-kubestellar-get-config-for-space --space-name "espw" --sm-core-config $SM_CONFIG --sm-context $SM_CONTEXT $in_cluster --output "/tmp/espw-conf"
KUBECONFIG="/tmp/espw-conf"

if ! kubectl get namespace "$cm_namespace" &> /dev/null
then kubectl create namespace "$cm_namespace"
else echo "namespace $cm_namespace already exists"
fi

kubectl apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: kbmap-$space_name
  namespace: $cm_namespace
  labels:
    kubestellar.io/kube-bind-id: $cluster_ns
data: {}
EOF

consumer_secret_name="$(echo $result | grep -e 'kubeconfig-\w*' -o)"
if [ -z "$consumer_secret_name" ]
then
    echo "Failed to find the consumer side secret, result of 'kubectl bind': $result" >&2
    exit 1
else
    echo "consumer side secret is $consumer_secret_name"
fi

KUBECONFIG=$space_conf_file
if ! sub_result="$(kubectl bind apiservice --remote-kubeconfig-namespace kube-bind --remote-kubeconfig-name $consumer_secret_name --skip-konnector -f $request_file 2>&1)"; then
    echo "Error occurred during binding $resource_to_bind for $space_name" >&2
    echo "Result of kubectl bind apiservice: $sub_result" >&2
    echo "Tail of konnector's log at $konnector_log_file:" >&2
    tail $konnector_log_file >&2
    exit 1
fi
