#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Purpose: ensure that a workload management workspace exists and has
# the needed APIBindings.

# Usage: kubectl ws parent; $0 ($kubectl_flag | --with-kube boolean)* wmw_name

want_kube=true
wmw_name=""

while (( $# > 0 )); do
    case "$1" in
	(--with-kube)
	    if (( $# >1 ))
	    then want_kube="$2"; shift
	    else echo "$0: missing with-kube value" >&2; exit 1
	    fi;;
	(--context*)
	    # TODO: support --context
	    echo "$0: --context flag not supported" >&2; exit 1;;
	(--*=*|-?=*)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";;
	(-h)
	    echo "Usage: kubectl ws parent; kubectl kubestellar ensure wmw (\$kubectl_flag | --with-kube boolean)* wm_workspace_name"
	    exit 0;;
	(--*|-?)
	    if (( $# > 1 ))
	    then kubectl_flags[${#kubectl_flags[*]}]="$1"
		 kubectl_flags[${#kubectl_flags[*]}]="$2"
		 shift
	    else echo "$0: missing value for long flag $1" >&2; exit 1
	    fi;;
	(-*)
	    echo "$0: flag syntax error" >&2
	    exit 1;;
	(*)
	    if [ -z "$wmw_name" ]
	    then wmw_name="$1"
	    else echo "$0: too many positional arguments" >&2
		 exit 1
	    fi
    esac
    shift
done

if [ "$wmw_name" == "" ]; then
    echo "$0: workload management workspace name not specified" >&2
    exit 1
fi

case "$want_kube" in
    (true|false) ;;
    (*) echo "$0: with-kube should be true or false" >&2
	exit 1;;
esac

set -e

original_ws=$(kubectl ws "${kubectl_flags[@]}" . --short)

if [ "$original_ws" != root ]; then
    kubectl ws "${kubectl_flags[@]}" ..
    if kubectl "${kubectl_flags[@]}" get workspaces.tenancy.kcp.io "$wmw_name" &> /dev/null; then
	echo "Warning: parent has a child with the given WMW name; are you sure the right workspace is current?" >&2
	sleep 15 # give a chance for ^C
    fi
    kubectl ws "${kubectl_flags[@]}" -
fi

if kubectl "${kubectl_flags[@]}" get workspaces.tenancy.kcp.io "$wmw_name" &> /dev/null
then kubectl ws "${kubectl_flags[@]}" "$wmw_name"
else kubectl ws "${kubectl_flags[@]}" create "$wmw_name" --enter
fi

if ! kubectl "${kubectl_flags[@]}" get APIBinding bind-espw &> /dev/null; then
kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: apis.kcp.io/v1alpha1
kind: APIBinding
metadata:
  name: bind-espw
spec:
  reference:
    export:
      path: root:espw
      name: edge.kcp.io
EOF
fi

if [ "$want_kube" == true ] && ! kubectl "${kubectl_flags[@]}" get APIBinding bind-kube &> /dev/null; then
kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: apis.kcp.io/v1alpha1
kind: APIBinding
metadata:
  name: bind-kube
spec:
  reference:
    export:
      path: root:compute
      name: kubernetes
EOF
elif [ "$want_kube" == false ] && kubectl "${kubectl_flags[@]}" get APIBinding bind-kube &> /dev/null; then
     kubectl "${kubectl_flags[@]}" delete APIBinding bind-kube
fi
