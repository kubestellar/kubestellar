#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Purpose: ensure that a workload management workspace exists and has
# the needed APIBindings.

# Usage: $0 ($kubectl_flag | --with-kube boolean)* wmw_path

want_kube=true
wmw_name=""
space_mgt="root:space-mgt"
spaceprovider_ns="spaceprovider-default"

while (( $# > 0 )); do
    case "$1" in
	(--with-kube)
	    if (( $# >1 ))
	    then want_kube="$2"; shift
	    else echo "$0: missing with-kube value" >&2; exit 1
	    fi;;
	(--context*)
	    # TODO: support --context
	    echo "$0: --context flag not supported" >&2; exit 1;;
	(--*=*|-?=*)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";;
	(-h)
	    echo "Usage: kubectl kubestellar ensure wmw (\$kubectl_flag | --with-kube boolean)* wm_workspace_path"
	    exit 0;;
	(--*|-?)
	    if (( $# > 1 ))
	    then kubectl_flags[${#kubectl_flags[*]}]="$1"
		 kubectl_flags[${#kubectl_flags[*]}]="$2"
		 shift
	    else echo "$0: missing value for long flag $1" >&2; exit 1
	    fi;;
	(-*)
	    echo "$0: flag syntax error" >&2
	    exit 1;;
	(*)
	    if [ -z "$wmw_name" ]
	    then wmw_name="$1"
	    else echo "$0: too many positional arguments" >&2
		 exit 1
	    fi
    esac
    shift
done

if [ "$wmw_name" == "" ]; then
    echo "$0: workload management workspace path not specified" >&2
    exit 1
fi

case "$want_kube" in
    (true|false) ;;
    (*) echo "$0: with-kube should be true or false" >&2
	exit 1;;
esac

set -e

IFS=':' read -ra ws_array <<< "$wmw_name"
first_item="true"
parent=""
kubectl config use-context $space_mgt

create_space() {
    kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: space.kubestellar.io/v1alpha1
kind: Space
metadata:
  name: $item
  namespace: $spaceprovider_ns
  annotations:
    kubestellar.io/space-path: $parent
spec:
  SpaceProviderDescName: default
  Managed: true
EOF
}

for item in "${ws_array[@]}"; do
    case "$item" in
    (root)
        if [ "$first_item" == "true" ]; then
            parent=$item
        else
            echo "\"root\" workspace can only be used at the beginning"
            exit 2
        fi;;
    (*)
        if [ "$verbose" == "true" ]; then
            if [[ -z "$(kubectl get space $item -n $spaceprovider_ns --ignore-not-found)" ]] ; then
                echo "Space "$item" does not exist. Creating"
                create_space
                sleep 3
            fi
        else
            if [[ -z "$(kubectl get space $item -n $spaceprovider_ns --ignore-not-found)" ]] ; then
                create_space 1> /dev/null
                sleep 3
            fi
        fi
        parent=$parent":"$item;;
    esac
    first_item="false"
done

if ! kubectl ws "${kubectl_flags[@]}" "$wmw_name"
then
    echo "Can't access workspace ""$wmw_name"".Check space exist and ready"
    exit 3
fi

if ! kubectl "${kubectl_flags[@]}" get APIBinding bind-espw &> /dev/null; then
kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: apis.kcp.io/v1alpha1
kind: APIBinding
metadata:
  name: bind-espw
spec:
  reference:
    export:
      path: root:espw
      name: edge.kubestellar.io
EOF
fi

function bind_iff_wanted() { # usage: export_name
    export_name=$1
    binding_name=bind-$export_name
    if [ "$want_kube" == true ] && ! kubectl "${kubectl_flags[@]}" get APIBinding ${binding_name} &> /dev/null; then
kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: apis.kcp.io/v1alpha1
kind: APIBinding
metadata:
  name: ${binding_name}
spec:
  reference:
    export:
      path: root:compute
      name: ${export_name}
EOF
elif [ "$want_kube" == false ] && kubectl "${kubectl_flags[@]}" get APIBinding ${binding_name} &> /dev/null; then
     kubectl "${kubectl_flags[@]}" delete APIBinding ${binding_name}
fi
}

bind_iff_wanted kubernetes
bind_iff_wanted apps
bind_iff_wanted autoscaling
bind_iff_wanted batch
bind_iff_wanted core.k8s.io
bind_iff_wanted discovery.k8s.io
bind_iff_wanted networking.k8s.io
bind_iff_wanted policy
bind_iff_wanted storage.k8s.io
