#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Purpose: ensure that a workload management workspace exists and has
# the needed APIBindings.

# Usage: $0 ($kubectl_flag | --with-kube boolean | -X)* wmw_name

want_kube=true
wmw_name=""
bindir=$(dirname $(realpath "${BASH_SOURCE[0]}"))

while (( $# > 0 )); do
    case "$1" in
	(-h|--help)
	    echo "Usage: kubectl kubestellar ensure wmw (\$kubectl_flag | --with-kube boolean | -X)* wm_workspace_name"
	    exit 0;;
	(-X) set -o xtrace;;
	(--with-kube)
	    if (( $# >1 ))
	    then want_kube="$2"; shift
	    else echo "$0: missing with-kube value" >&2; exit 1
	    fi;;
	(--context*)
	    # TODO: support --context
	    echo "$0: --context flag not supported" >&2; exit 1;;
	(--*=*|-?=*)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";;
	(--*|-?)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";
	    if (( $# > 1 )); then 
		 kubectl_flags[${#kubectl_flags[*]}]="$2"
		 shift
	    fi;;
	(-*)
	    echo "$0: flag syntax error" >&2
	    exit 1;;
	(*)
	    if [ -z "$wmw_name" ]
	    then wmw_name="$1"
	    else echo "$0: too many positional arguments" >&2
		 exit 1
	    fi
    esac
    shift
done

if [ "$PROVIDER_NAME" == "" ]; then
    PROVIDER_NAME="default"
    export PROVIDER_NAME
fi
if [ "$PROVIDER_NAMESPACE" == "" ]; then
    PROVIDER_NAMESPACE=spaceprovider-${PROVIDER_NAME}
    export PROVIDER_NAMESPACE
fi
if [ "$KUBECONFIG_DIR" == "" ]; then
    KUBECONFIG_DIR="${PWD}/temp-space-config"
    mkdir -p $KUBECONFIG_DIR
    export KUBECONFIG_DIR
fi
if [ "$SPACE_MANAGER_KUBECONFIG" == "" ]; then
    SPACE_MANAGER_KUBECONFIG="${KUBECONFIG_DIR}/config"
    export SPACE_MANAGER_KUBECONFIG
fi
if [ "$IN_CLUSTER" == "" ]; then
    IN_CLUSTER=true
    export IN_CLUSTER
fi

echo "SPACE_MANAGER_KUBECONFIG=${SPACE_MANAGER_KUBECONFIG}"
echo "PROVIDER_NAME=${PROVIDER_NAME}"
echo "PROVIDER_NAMESPACE=${PROVIDER_NAMESPACE}"
echo "IN_CLUSTER=${IN_CLUSTER}"

if [ "$wmw_name" == "" ]; then
    echo "$0: workload management workspace name not specified" >&2
    exit 1
fi

case "$want_kube" in
    (true|false) ;;
    (*) echo "$0: with-kube should be true or false" >&2
	exit 1;;
esac

set -e

in_cluster=
if $IN_CLUSTER; then
    in_cluster="--in-cluster"
fi

space_config="${KUBECONFIG_DIR}/${PROVIDER_NAMESPACE}-${wmw_name}"
kubectl-kubestellar-create-space --space-name $wmw_name --provider-name $PROVIDER_NAME --sm-core-config $SPACE_MANAGER_KUBECONFIG
kubectl-kubestellar-get-config-for-space --space-name $wmw_name --provider-name $PROVIDER_NAME --sm-core-config $SPACE_MANAGER_KUBECONFIG ${in_cluster} --space-config-file $space_config

KUBECONFIG=$space_config kubestellar-kube-bind "$wmw_name" "edgeplacements"
KUBECONFIG=$space_config kubestellar-kube-bind "$wmw_name" "customizers"
KUBECONFIG=$space_config kubestellar-kube-bind "$wmw_name" "singleplacementslices"

function reconcile_kube_CRDs() {
	if [ "$want_kube" == true ]; then
		kubectl --kubeconfig $space_config "${kubectl_flags[@]}" apply --server-side=true -R -f "$bindir/../config/kube/crds/"
	else
		kubectl --kubeconfig $space_config "${kubectl_flags[@]}" delete -R -f "$bindir/../config/kube/crds/"
	fi
}

reconcile_kube_CRDs
