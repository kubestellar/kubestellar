#!/usr/bin/env bash
# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Usage: $0 (init or start or stop | -v)

# Purpose: control whether the controllers are running, setting up the ESPW if necessary.. The following components are created:
#           (a) 1 kcp workspace: edge service provider workspace (espw)
#           (b) 3 kubestellar controllers: kubestellar-where-resolver, mailbox-controller and placement-translator

# Assumption: kcp server is running.

# Requirements:
#    Download KubeStellar binaries
#    KubeStellar controller binaries are on $PATH.


set -e

subcommand=""
verbosity=0
verbdir="&> /dev/null"
remove=0
cleanup=0
espw_name="espw"
space_mgt_name="space-mgt"
log_folder=$(pwd)/kubestellar-logs

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

while (( $# > 0 )); do
    case "$1" in
    (start|stop|init)
        subcommand=$1;;
    (--log-folder)
        if (( $# > 1 ));
        then { log_folder="$2"; shift; }
        else { echo "$0: missing log folder" >&2; exit 1; }
        fi;;
    (--verbose|-V)
        verbosity=1
	verbdir="";;
    (-X)
	set -x;;
    (-h|--help)
        echo "Usage: $0 [init | start | stop] [--log-folder log_folder] [-V|--verbose] [-X]"
        exit 0;;
    (-*)
        echo "$0: unknown flag" >&2 ; exit 1;
        exit 1;;
    (*)
        echo "$0: unknown positional argument" >&2; exit 1;
        exit 1;;
    esac
    shift
done

if [ "$subcommand" == "" ]; then
    echo "$0: missing a subcommand" >&2
    exit 1
fi

# Check if a given process name is running
process_running() {
  SERVICE="$1"
  if pgrep -f "$SERVICE" >/dev/null
  then
      echo "running"
  else
      echo "stopped" 
  fi
}

# Check if kcp is running
if [ $(process_running kcp) != "running" ]
then
    echo "kcp is not running - please start it ...."
    exit 1
fi

function create_or_replace() { # usage: filename
    filename="$1"
    kind=$(grep kind: "$filename" | head -1 | awk '{ print $2 }')
    name=$(grep name: "$filename" | head -1 | awk '{ print $2 }')
    if kubectl get "$kind" "$name" &> /dev/null
    then eval kubectl replace -f "$filename" $verbdir
    else eval kubectl create -f "$filename" $verbdir
    fi
}
    
# current ws at start does not matter, is root:compute on return
function ensure_root_compute_configd() {
    if ! kubectl ws root:compute &> /dev/null ; then
	echo "$0: Something is very wrong, unable to set current kcp workspace to root:compute" >&2
	exit 1
    fi
    ( cd ${SCRIPT_DIR}/../config/kube/exports/namespaced
      # Some are too big to `kubectl apply`
      for rsfn in apiresourceschema-*.yaml; do
	  create_or_replace $rsfn
      done
      for refn in apiexport-*.yaml; do
	  eval kubectl apply -f "$refn" $verbdir
      done
    )
    eval kubectl apply -f - $verbdir <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compute:apiexport:kubernetes-extended:bind
rules:
- apiGroups:
  - apis.kcp.io
  resourceNames:
  - apps
  - autoscaling
  - batch
  - core.k8s.io
  - discovery.k8s.io
  - networking.k8s.io
  - policy
  - storage.k8s.io
  resources:
  - apiexports
  verbs:
  - bind
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compute:apiexport:kubernetes:maximal-permission-policy-extended
rules:
- apiGroups:
  - ""
  - apps
  - networking.k8s.io

  - autoscaling
  - batch
  - discovery.k8s.io
  - policy
  - storage.k8s.io
  resources:
  - services
  - pods
  - ingresses
  - deployments

  - cronjobs
  - csistoragecapacities
  - daemonsets
  - endpoints
  - endpointslices
  - horizontalpodautoscalers
  - jobs
  - networkpolicies
  - persistentvolumeclaims
  - poddisruptionbudgets
  - podtemplates
  - replicasets
  - replicationcontrollers
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - ""
  - apps
  - networking.k8s.io

  - autoscaling
  - batch
  - discovery.k8s.io
  - policy
  - storage.k8s.io
  resources:
  - services/status
  - pods/status
  - ingresses/status
  - deployments/status
  - deployments/scale

  - cronjobs/status
  - csistoragecapacities/status
  - daemonsets/status
  - endpoints/status
  - endpointslices/status
  - horizontalpodautoscalers/status
  - jobs/status
  - networkpolicies/status
  - persistentvolumeclaims/status
  - poddisruptionbudgets/status
  - podtemplates/status
  - replicasets/scale
  - replicasets/status
  - replicationcontrollers/scale
  - replicationcontrollers/status
  - statefulsets/scale
  - statefulsets/status
  verbs:
  - get
  - list
  - watch
  - update
  - patch
EOF
    kubectl apply -f - &> /dev/null <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compute:apiexport:kubernetes-extended:bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: compute:apiexport:kubernetes-extended:bind
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: apis.kcp.io:binding:system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compute:authenticated:apiexport:kubernetes:maximal-permission-policy-extended
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: compute:apiexport:kubernetes:maximal-permission-policy-extended
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: apis.kcp.io:binding:system:authenticated
EOF
    echo "Finished augmenting root:compute for KubeStellar"
}

function ensure_space_mgt() {
    kubectl ws root &> /dev/null
    $SCRIPT_DIR/space-provider-config "$KUBECONFIG" "$SCRIPT_DIR/../config/space/provider_kcp.yaml"
    if kubectl get Workspace "$space_mgt_name" &> /dev/null; then
	echo "space-mgt workspace already exists -- using it:"
	kubectl ws "$space_mgt_name"
    else
        kubectl ws create "$space_mgt_name" --enter
    fi
    kubectl ws create-context --overwrite
    # create space CRDs
    eval kubectl apply -f "$SCRIPT_DIR/../config/crds/space.kubestellar.io_spaces.yaml" $verbdir
    eval kubectl apply -f "$SCRIPT_DIR/../config/crds/space.kubestellar.io_spaceproviderdescs.yaml" $verbdir
    # deploy KCP provider
    eval kubectl apply -f "$SCRIPT_DIR/../config/space/provider_kcp.yaml" $verbdir
    echo "Finished populating the space-mgt with kubestellar apiexports"
}

# current ws at start does not matter, is ESPW on return
function ensure_espw() {
    kubectl ws root &> /dev/null
    if kubectl get Workspace "$espw_name" &> /dev/null; then
	echo "espw workspace already exists -- using it:"
	kubectl ws "$espw_name"
    else 
        kubectl ws create "$espw_name" --enter
    fi
    eval kubectl apply -f "$SCRIPT_DIR/../config/exports" $verbdir
    echo "Finished populating the espw with kubestellar apiexports"   
}

if [ "$subcommand" == init ]; then
    ensure_root_compute_configd
    ensure_space_mgt
    ensure_espw
    exit
fi

# Check space-manager is already running
if [ $(process_running space-manager) == "running" ]
then
    echo "An older deployment of space-manager is already running - terminating it ...."
    pkill -f space-manager
fi

# Check mailbox-controller is already running
if [ $(process_running mailbox-controller) == "running" ]
then
    echo "An older deployment of mailbox-controller is already running - terminating it ...."
    pkill -f mailbox-controller
fi

# Check kubestellar-where-resolver is already running
if [ $(process_running "kubestellar-where-resolver") == "running" ]
then
    echo "An older deployment of kubestellar-where-resolver is already running - terminating it ...."
    pkill -f "kubestellar-where-resolver"
fi

# Check placement-translator is already running
if [ $(process_running placement-translator) == "running" ]
then
    echo "An older deployment of placement-translator is already running - terminating it ...."
    pkill -f placement-translator
fi

if [ $subcommand == stop ]; then    
   echo "kubestellar stopped ....."
   exit 0
fi

ensure_root_compute_configd
ensure_space_mgt
ensure_espw

wait_for_process(){
  status=$(process_running $1)
  MAX_RETRIES=5
  retries=0
  status_code=0
  while [ $status != "running" ]; do
      if [ $retries -eq $MAX_RETRIES ]; then
           status_code=1
           break
      fi

      retries=$(( retries + 1 ))
      sleep 3
      status=$(process_running $1)
  done
  echo $status_code
}


# Start the kubestellar controllers
echo "****************************************"
echo "Launching KubeStellar ..."
echo "****************************************"


sleep 5

# Create the logs directory
if [[ ! -d $log_folder ]]; then
    mkdir -p $log_folder
fi

space-manager -context "root:"$space_mgt_name -v=2 >> $log_folder/space-manager-log.txt 2>&1 &
run_status=$(wait_for_process space-manager)
if [ $run_status -eq 0 ]; then
    echo " space-manager is running (log file: $log_folder/space-manager-log.txt)"
else
    echo " space-manager failed to start ..... exiting"
    sleep 2
    exit 1
fi

sleep 3
mailbox-controller -v=2 >> $log_folder/mailbox-controller-log.txt 2>&1 &

run_status=$(wait_for_process mailbox-controller)
if [ $run_status -eq 0 ]; then
    echo " mailbox-controller is running (log file: $log_folder/mailbox-controller-log.txt)"
else
    echo " mailbox-controller failed to start ..... exiting"
    sleep 2
    exit 1
fi


# Start the kubestellar where-resolver
sleep 3
kubestellar-where-resolver -v 2 >> $log_folder/kubestellar-where-resolver-log.txt 2>&1 &

run_status=$(wait_for_process "kubestellar-where-resolver")
if [ $run_status -eq 0 ]; then
    echo " where-resolver is running (log file: $log_folder/kubestellar-where-resolver-log.txt)"
else
    echo " where-resolver failed to start ..... exiting"
    exit 1
fi
 
# Start the Placement Translator
sleep 3
placement-translator --allclusters-context  "system:admin" -v=2 >> $log_folder/placement-translator-log.txt 2>&1 &

run_status=$(wait_for_process placement-translator)
if [ $run_status -eq 0 ]; then
    echo " placement translator is running (log file: $log_folder/placement-translator-log.txt)"
else
    echo " placement translator failed to start ..... exiting"
    exit 1
fi

sleep 10
echo "****************************************"
echo "Finished launching KubeStellar ..."
echo "****************************************"
kubectl ws root

